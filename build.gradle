apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'antlr'
apply plugin: 'eclipse'
apply plugin: 'idea'

project.archivesBaseName = 'B2Program'
project.version = '0.1.0-SNAPSHOT' // If no snapshot, adapt ANTLR parser tag to git revision
project.group = 'de.hhu.stups'

mainClassName = 'de.hhu.stups.codegenerator.CodeGenerator'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        name "snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name "release"
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    antlr "org.antlr:antlr4:4.7"
    compile group: 'org.antlr', name: 'ST4', version: '4.3'
    // antlr parser dependency
    compile 'com.github.hhu-stups:antlr-parser:-SNAPSHOT' // https://github.com/hhu-stups/antlr-parser'

    testCompile 'junit:junit:4.8.2'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'de.hhu.stups.codegenerator.CodeGenerator'
        )
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    manifest {
        attributes(
                'Main-Class': 'de.hhu.stups.codegenerator.CodeGenerator'
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.java.srcDirs = ['src/main/java']

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)


tasks.withType(JavaExec) {
    if(project.hasProperty('language') && project.hasProperty('big_integer') && project.hasProperty('deferred_set_size') && project.hasProperty('file')) {
        if(!(project.hasProperty('minint') && project.hasProperty('maxint'))) {
            if (project.hasProperty('addition')) {
                args([language, big_integer, -2147483648, 2147483647, deferred_set_size, project.rootDir.path.toString() + File.separator +  file, addition])
            } else {
                args([language, big_integer, -2147483648, 2147483647, deferred_set_size, project.rootDir.path.toString() + File.separator + file])
            }
        } else {
            if (project.hasProperty('addition')) {
                args([language, big_integer, minint, maxint, deferred_set_size, project.rootDir.path.toString() + File.separator + file, addition])
            } else {
                args([language, big_integer, minint, maxint, deferred_set_size, project.rootDir.path.toString() + File.separator + file])
            }
        }
    }

    def env_vars = ['LD_LIBRARY_PATH'  : ("$System.env.LD_LIBRARY_PATH" + System.getProperty("path.separator") + "$projectDir/"),
                    'DYLD_LIBRARY_PATH': ("$System.env.DYLD_LIBRARY_PATH" + System.getProperty("path.separator") + "$projectDir/"),
                    'PATH'             : ("$System.env.PATH" + System.getProperty("path.separator") + "$projectDir/")]
    environment env_vars

    systemProperty "java.library.path", "./"
}



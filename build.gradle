apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'antlr'
apply plugin: 'eclipse'
apply plugin: 'idea'

project.archivesBaseName = 'B2Program'
project.version = '0.1.0-SNAPSHOT' // If no snapshot, adapt ANTLR parser tag to git revision
project.group = 'de.hhu.stups'

mainClassName = 'de.hhu.stups.codegenerator.CodeGenerator'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name "release"
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    antlr 'org.antlr:antlr4:4.7.1'
    implementation group: 'org.antlr', name: 'ST4', version: '4.3.3'
    // antlr parser dependency
    implementation 'com.github.hhu-stups:antlr-parser:-SNAPSHOT' // https://github.com/hhu-stups/antlr-parser'

    implementation group: 'org.clojure', name: 'clojure', version: '1.6.0'

    implementation group: "com.fatboyindustrial.gson-javatime-serialisers", name: "gson-javatime-serialisers", version: "1.1.1"
    implementation group: "com.google.code.gson", name: "gson", version: "2.8.6"
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'
    testImplementation 'junit:junit:4.13.2'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'de.hhu.stups.codegenerator.CodeGenerator'
        )
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    manifest {
        attributes(
                'Main-Class': 'de.hhu.stups.codegenerator.CodeGenerator'
        )
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "META-INF/*.md"
        exclude "module-info.class"
    }
    with jar
}

wrapper {
    gradleVersion = "7.4.2"
}



sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.java.srcDirs = ['src/main/java']

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)


tasks.withType(JavaExec) {
    if(project.hasProperty('language') && project.hasProperty('big_integer') && project.hasProperty('file')) {
        def arguments = [language, big_integer]

        if(project.hasProperty('minint')) {
            arguments.add(minint)
        } else {
            arguments.add(-2147483648)
        }

        if(project.hasProperty('maxint')) {
            arguments.add(maxint)
        } else {
            arguments.add(2147483647)
        }

        if(project.hasProperty('deferred_set_size')) {
            arguments.add(deferred_set_size)
        } else {
            arguments.add(10)
        }

        if(project.hasProperty('useConstraintSolving')) {
            arguments.add(useConstraintSolving)
        } else {
            arguments.add(false)
        }

        if(project.hasProperty('forModelchecking')) {
            arguments.add(forModelchecking)
        } else {
            arguments.add(false)
        }

        arguments.add(file)

        if(project.hasProperty('addition')) {
            arguments.add(addition)
        } else {
            arguments.add("")
        }

        if(project.hasProperty('forVisualisation')) {
            arguments.add(forVisualisation)
        }

        if(project.hasProperty('visualisation')) {
            arguments.add(visualisation)
        }

        args(arguments)
    }

    def env_vars = ['LD_LIBRARY_PATH'  : ("$System.env.LD_LIBRARY_PATH" + System.getProperty("path.separator") + "$projectDir/"),
                    'DYLD_LIBRARY_PATH': ("$System.env.DYLD_LIBRARY_PATH" + System.getProperty("path.separator") + "$projectDir/"),
                    'PATH'             : ("$System.env.PATH" + System.getProperty("path.separator") + "$projectDir/")]
    environment env_vars

    systemProperty "java.library.path", "./"
}



keywords() ::= <<
abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, try, void, volatile, while, true, false, null, var, const, goto
>>

machine(imports, methods, includedMachines, machine, constants, values, includes, sets, declarations, initialization, operations, addition) ::= <<
(ns Projects.<machine>
    <imports; separator="\n">
    (:import de.hhu.stups.btypes.BUtils)
    (:gen-class
        :name <machine>
        :constructors {[] []}
        :init create-<machine>
        :state <machine>-state))

(gen-class
    :name <machine>
    :constructors {[] []}
    :init create-<machine>
    :state <machine>-state
    :methods [<methods; separator=" ">])

(defn -create-<machine> []
    (let [<initialization>]
        [[] {<values; separator=" ">
            <includes; separator=" ">
            <declarations; separator=" ">
            <sets; separator=" ">
                }]))

<operations; separator="\n\n">


<addition>
>>

initialization(body) ::= <<
<body>
>>

method(operationName, argsTypes, returnType) ::= <<
[<operationName> [<argsTypes; separator=" ">] <returnType>]
>>

operation(machine, operationName, parameters, locals, body, return) ::= <<
(defn -<operationName> [this<parameters : {param |  <param>}>]
    (do (let [<body>]
            <return>)))
>>

return(identifier) ::= <<
<identifier>
>>

no_return() ::=<<
nil
>>

set_declaration(identifier, enums) ::= <<
:<identifier> <set_enumeration(enums, false)>
>>

set_enumeration(enums, isRelation) ::= <<
(<if(isRelation)>de.hhu.stups.btpyes.BRelation.<else>de.hhu.stups.btypes.BSet.<endif> #{<enums; separator=" ">})
>>

seq_enumeration(type, elements) ::= <<
>>

enum_call(identifier) ::= <<
(de.hhu.stups.btypes.BEnum. :<identifier>)
>>

set_enum_declaration() ::= <<
>>

bool() ::= <<
(de.hhu.stups.btypes.BUtils/BOOL)
>>

include_declaration(type, identifier) ::= <<
:<declaration(identifier)> (<type>.)
>>

global_declaration() ::= <<
>>

local_declaration() ::= <<
>>

constant() ::= <<
>>

values(assignments) ::= <<
<assignments; separator="\n">
>>

declaration(identifier) ::= <<
<identifier>
>>

parameter(identifier) ::= <<
<identifier>
>>

constant_declaration(type, identifier) ::= <<
<identifier>
>>

constant_initialization(iterationConstruct, identifier, val) ::= <<
>>

parallel(machine, loads, others) ::=<<
(do <others; separator="\n">)
>>

parallel_load(machine, identifier, isPrivate) ::= <<
<if(isPrivate)>_ld_<identifier> (get-in (.-<machine>-state this) [:<identifier>])<else>_ld_<identifier> <identifier><endif>
>>

assignment(machine, identifier, isPrivate, val) ::= <<
<if(isPrivate)>_ (reset! (.-<machine>-state this) (assoc-in (.-<machine>-state this) [:<identifier>] <val>))<else>identifier <val><endif>
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(machine, identifier, isPrivate, set) ::= <<
<if(isPrivate)>_ (reset! (.-<machine>-state this) (assoc-in (.-<machine>-state this) [:<identifier>] (.nondeterminism <set>)))<else><identifier> (.nondeterminism <set>)<endif>
>>

void() ::= <<
void
>>

type(type) ::= <<
de.hhu.stups.btypes.<type>
>>

tuple_type() ::=<<
de.hhu.stups.btypes.BTuple
>>

set_type() ::=<<
de.hhu.stups.btypes.BSet
>>

relation_type() ::= <<
de.hhu.stups.btypes.BRelation
>>

import_type(type) ::= <<
(:import de.hhu.stups.btypes.<type>)
>>


interval(arg1, arg2) ::= <<
(de.hhu.stups.btypes.BSet/interval <arg1> <arg2>)
>>

tuple_create(arg1, arg2) ::= <<
(de.hhu.stups.btypes.BTuple. <arg1> <arg2>)
>>


binary(arg1,operator,arg2) ::= <<
(.<operator> <arg1> <arg2>)
>>

unary(operator, obj, args) ::= <<
(.<operator> <obj> <args; separator=" ">)
>>

select(predicate, then) ::= <<
(if (.booleanValue <predicate>)
    (do <then>)
    (throw (RuntimeException. "Invocation of the operation is not possible")))
>>

if(predicate, then, else1) ::= <<
(cond (.booleanValue <predicate>)
    (do <then>)
    <else1; separator=" ">)
>>

elseif(predicate, then) ::= <<
(.booleanValue <predicate>)
(do <then>)
>>

else(then) ::= <<
:otherwise
(do <then>)
>>

choice(len, then, choice1) ::= <<
(let [index (Math/floor (* (Math/random) <len>))]
    (if (= index 0)
        (do <then>)
        <choice1; separator=" ">))
>>

choice1(counter, then) ::= <<
(if (= index <counter>)
    (do <then>))
>>

choice2(then) ::= <<
(do <then>)
>>

any(machine, identifier, set, body, index, isBool) ::= <<
(doseq [_<index>_i (range (inc (.size <if(isBool)><set><else>(get-in (.-<machine>-state this) [:<set>])<endif>)))]
    (let [<identifier> (nth <if(isBool)><set><else>(get-in (.-<machine>-state this) [:<set>])<endif> _<index>_i)]
        <body>))
>>

any_body(predicate, body) ::= <<
(if (.booleanValue <predicate>)
    (do <body>))
>>

while(predicate, then) ::= <<
(while (.booleanValue <predicate>)
    (do <then>))
>>

var(machine, locals, body) ::=<<
(do (let [<body>])
>>

boolean_val(val) ::= <<
<if(val)>(de.hhu.stups.btypes.BBoolean. true)<else>(de.hhu.stups.btypes.BBoolean. false)<endif>
>>

identifier(machine, identifier, isAssigned, rhsOnLhs) ::= <<
<if(rhsOnLhs)>_ld_<identifier><else><if(isAssigned)><identifier><else>(get-in (.-<machine>-state this) [:<identifier>])<endif><endif>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>(de.hhu.stups.btypes.BInteger. "<number>")<else>(de.hhu.stups.btypes.BInteger. <number>)<endif>
>>

operation_call_with_assignment_one_parameter(thisName, machine, var, isPrivate, function, args, this) ::= <<
<if(isPrivate)>_ (reset! (.-<thisName>-state this) (assoc-in (.-<thisName>-state this) [:<var>] <operation_call_without_assignment(thisName, machine, function, args, this)>))<else><var> <operation_call_without_assignment(thisName, machine, function, args, this)><endif>
>>

operation_call_without_assignment(thisName, machine, function, args, this) ::= <<
(.<function> <if(this)><else>(get-in (.<thisName>-state this) [:<machine>])<endif> <args; separator=" ">)
>>

skip() ::= <<
>>

enum-import() ::= <<
>>

record_private_variable_prefix() ::= <<
>>

include_initialization() ::= <<
>>

transition_cache_declaration(type, identifier, operationHasParams) ::= <<
>>

set_initialization(identifier, type, enums) ::= <<>>

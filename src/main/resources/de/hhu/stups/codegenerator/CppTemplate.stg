keywords() ::= <<
Asm, auto, and, and_eq, bool, bitor, bitand, break, case, catch, char, class, compl, const, const_cast, continue, default, #define, delete, do, double, dynamic_cast, else, enum, exit(), explicit, export
extern, extern "C", false, float, for, union, unsigned, using, friend, goto, if, inline, int, long, mutable, virtual, namespace, new, not, not_eq, operator, or, or_eq, private, protected, public, register, void, reinterpret_cast,
return, short, signed, sizeof, static, static_cast, volatile, struct, switch, template, this, throw, true, try, typedef, typeid, union, unsigned, using, wchar_t, while, xor, xor_eq, size
>>


machine(forModelChecking, imports, includedMachines, machine, structs, constants_declarations, includes, enums, sets, declarations, initialization, copyConstructor, operations, addition, useBigInteger, getters, transitions, projection, projectionClasses, invariant, copy, hash_equal, modelcheck, lambdaFunctions, mainMethod, transitionCachesDeclaration, machineString) ::= <<
#include \<iostream>
#include \<string>
#include \<sstream>
#include \<stdexcept>
<if(forModelChecking)>
#include \<immer/map.hpp>
#include \<map>
#include \<unordered_set>
#include \<unordered_map>
#include \<list>
#include \<atomic>
#include \<any>
#include \<mutex>
#include \<future>
#include \<boost/asio/post.hpp>
#include \<boost/asio/thread_pool.hpp>
<endif>
<if(useBigInteger)>
#include \<btypes_big_integer/BUtils.hpp>
#include \<btypes_big_integer/StateNotReachableError.hpp>
#include \<btypes_big_integer/PreconditionOrAssertionViolation.hpp>
#include \<btypes_big_integer/VariantViolation.hpp>
#include \<btypes_big_integer/LoopInvariantViolation.hpp>
<else>
#include \<btypes_primitives/BUtils.hpp>
#include \<btypes_primitives/StateNotReachableError.hpp>
#include \<btypes_primitives/PreconditionOrAssertionViolation.hpp>
#include \<btypes_primitives/VariantViolation.hpp>
#include \<btypes_primitives/LoopInvariantViolation.hpp>
<endif>
<imports; separator="\n">
<includedMachines; separator="\n">

#ifndef <machine>_H
#define <machine>_H

using namespace std;

class <machine> {

    public:

        <if(forModelChecking)>
        enum Type { BFS, DFS, MIXED };
        <endif>

        <enums; separator="\n\n">

        <structs; separator="\n\n">

        <if(forModelChecking)>
        struct Hash {
            public:
                size_t operator()(const <machine>& obj) const {
                    return obj.hashCode();
                }
        };

        struct HashEqual {
            public:
                bool operator()(const <machine>& obj1, const <machine>& obj2) const {
                    if (obj1 == obj2)
                        return true;
                    else
                        return false;
                    }
            };

        <projectionClasses; separator="\n">

        <endif>

    private:

        <constants_declarations; separator="\n">

        <includes; separator="\n">

        <sets; separator="\n">

        <declarations; separator="\n">
        <if(forModelChecking)>

        <transitionCachesDeclaration; separator="\n">
        <endif>

    public:
        <if(forModelChecking)>

        std::string stateAccessedVia;
        <endif>

        <initialization>

        <if(forModelChecking)>
        <copyConstructor>
        <endif>

        <operations; separator="\n\n">

        <getters; separator="\n\n">

        <if(!forModelChecking)>
        <machineString; separator="\n\n">
        <endif>

        <if(forModelChecking)>

        <transitions; separator="\n\n">

        <projection; separator="\n\n">

        <invariant; separator="\n\n">

        <copy>

        <hash_equal; separator="\n\n">

        <endif>

        <lambdaFunctions; separator="\n\n">
};

<if(forModelChecking)>

<modelcheck>

<mainMethod>

<endif>

<addition>

#endif
>>

machine_unequal(machine, predicates) ::= <<
friend bool operator !=(const <machine>& o1, const <machine>& o2) {
    <if(predicates)>
    return <predicates; separator=" || ">;
    <else>
    return false;
    <endif>
}
>>

machine_unequal_predicate(var) ::= <<
o1.<var>() != o2.<var>()
>>

machine_equal(machine, predicates) ::= <<
friend bool operator ==(const <machine>& o1, const <machine>& o2) {
    <if(predicates)>
    return <predicates; separator= " && ">;
    <else>
    return true;
    <endif>
}
>>

machine_equal_predicate(var) ::= <<
o1.<var>() == o2.<var>()
>>

machine_hash(assignments1, assignments2) ::= <<
int hashCode() const {
    return this->_hashCode_1();
}

int _hashCode_1() const {
    int result = 1;
    <assignments1; separator= "\n">
    return result;
}

int _hashCode_2() const {
    int result = 1;
    <assignments2; separator= "\n">
    return result;
}
>>

machine_hash_assignment(primeNumber, var) ::= <<
result = (<primeNumber> * result) ^ ((this-><var>()).hashCode() \<\< 1);
>>

machine_string(machine, variables) ::= <<
friend std::ostream& operator\<\<(std::ostream &strm, const <machine>& machine) {
  <variables:{var | strm \<\< "<var>: " \<\< machine.<var>() \<\< "\n";}; separator="\n">
  return strm;
}
>>


getter(returnType, variable) ::= <<
<returnType> _get_<variable>() const {
    return <variable>;
}
>>

struct(name, declarations, parameters, initializations, functions, assignments, equalPredicates, unequalPredicates, values, fields) ::= <<
class <name> : public BStruct {
    private:
        <declarations; separator="\n">

    public:
        typedef <name> current_type;
        typedef void value_type;
        typedef void left_type;
        typedef void right_type;

        <name>(<parameters; separator=", ">) {
            <initializations; separator="\n">
        }

        <functions; separator="\n\n">

        <name>() {
        }

        void operator =(const <name>& other) {
            <assignments; separator="\n">
        }

        BBoolean equal(const <name>& o) const {
            return <equalPredicates; separator=" && ">;
        }

        BBoolean unequal(const <name>& o) const {
            return <unequalPredicates; separator=" || ">;
        }

        friend bool operator ==(const <name>& p1, const <name>& p2) {
            return (p1.equal(p2)).booleanValue();
        }

        friend bool operator !=(const <name>& p1, const <name>& p2) {
            return (p1.unequal(p2)).booleanValue();
        }

        friend std::ostream& operator\<\<(std::ostream &strm, const <name>& e) {
            strm \<\< "(";
            <values; separator="\n">
            strm \<\< ")";
            return strm;
        }

        int hashCode() const {
            int result = 1;
            <fields: {field | result = 31 * result + (<field>.hashCode() \<\< 1);}; separator="\n">
            return result;
        }
};
>>

record_field_get(type, field) ::= <<
<type> get_<field>() {
    return this-><field>;
}
>>

record_field_access(record, field) ::= <<
(<record>.get_<field>())
>>

record_access_nested(record, field, isNested) ::= <<
(<if(!isNested)><record><else><record>.get_<field>()<endif>)
>>

record_access_element(expr, arg, val) ::= <<
(<expr>.override_<arg>(<val>))
>>

record_field_override(name, field, type, val, parameters) ::= <<
<name> override_<field>(const <type>& <field>) {
    return <name>(<parameters; separator=", ">);
}
>>

record_assignment(identifier) ::= <<
this-><identifier> = other.<identifier>;
>>

record_equal_predicate(field) ::= <<
this-><field> == o.<field>
>>

record_unequal_predicate(field) ::= <<
this-><field> != o.<field>
>>

record_field_to_string(identifier) ::= <<
strm \<\< "<identifier> : ";
strm \<\< e.<identifier>;
>>

record_field_initialization(identifier) ::= <<
this-><identifier> = <identifier>;
>>

record(struct, parameters) ::= <<
(<struct>(<parameters; separator=", ">))
>>

initialization(machine, properties, values, body, iterationConstruct, propertiesCheck) ::= <<
<machine>() {
    <if(properties)>
    <properties; separator="\n">
    <values; separator="\n">
    <if(propertiesCheck)>
    <iterationConstruct; separator="\n">
    if(!(<propertiesCheck>).booleanValue()) {
        throw std::runtime_error("Contradiction in PROPERTIES detected!");
    }
    <endif>
    <endif>
    <body>
}
>>

method() ::= <<
>>

operation(returnType, operationName, parameters, locals, body, return) ::= <<
<returnType> <operationName>(<parameters; separator=", ">) {
    <locals; separator="\n">
    <body>
    <return>
}
>>

return(identifier) ::= <<
return <identifier>;
>>

no_return() ::=<<
>>

set_declaration(identifier, type, enums) ::= <<
#define <identifier> <set_enumeration("", type, "", enums, false)>
>>

iteration_construct_enumeration(otherIterationConstructs, type, identifier, set, body, hasCondition, conditionalPredicate) ::= <<
<otherIterationConstructs>
<if(hasCondition)>
if((<conditionalPredicate>).booleanValue()) {
    for(const <type>& <identifier> : <set>) {
        <body>
    }
}
<else>
for(const <type>& <identifier> : <set>) {
    <body>
}
<endif>
>>

iteration_construct_assignment(otherIterationConstructs, type, identifier, set, body, hasCondition, conditionalPredicate) ::= <<
<otherIterationConstructs>
<if(hasCondition)>
if((<conditionalPredicate>).booleanValue()) {
    for(const <type>& <identifier> : {<set>}) {
        <body>
    }
}
<else>
for(const <type>& <identifier> : {<set>}) {
    <body>
}
<endif>
>>

iteration_construct_subset(otherIterationConstructs, type, identifier, set, body, hasCondition, conditionalPredicate) ::= <<
<otherIterationConstructs>
<if(hasCondition)>
if((<conditionalPredicate>).booleanValue()) {
    for(const <type>& <identifier> : <set>.pow()) {
        <body>
    }
}
<else>
for(const <type>& <identifier> : <set>.pow()) {
    <body>
}
<endif>
>>

iteration_construct_subsetneq(otherIterationConstructs, type, identifier, set, body, hasCondition, conditionalPredicate) ::= <<
<otherIterationConstructs>
<if(hasCondition)>
if((<conditionalPredicate>).booleanValue()) {
    for(const <type>& <identifier> : <set>.pow().difference(BSet\<<type>\>(<set>))) {
        <body>
    }
}
<else>
for(const <type>& <identifier> : <set>.pow().difference(BSet\<<type>\>(<set>))) {
    <body>
}
<endif>
>>

iteration_construct_pruning(predicate, body) ::= <<
if((<predicate>).booleanValue()) {
    <body>
}
>>

let_expression_predicate(type, identifier, body) ::= <<
<type> <identifier>;
<body>
>>

let_expression_predicate_body(otherIterationConstructs, hasCondition, conditionalPredicate, identifier, val) ::= <<
<otherIterationConstructs>
<identifier> = <val>;
>>

set_comprehension(type, identifier, comprehension) ::= <<
<type> <identifier> = <type>();
<comprehension>
>>

set_comprehension_predicate(otherIterationConstructs, set, type, element, emptyPredicate, hasCondition, conditionalPredicate, predicate, isRelation) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<set> = <set>._union(<type>(<element>));
<else>
if((<predicate>).booleanValue()) {
    <set> = <set>._union(<type>(<element>));
}
<endif>
>>

lambda(type, identifier, lambda) ::= <<
<type> <identifier> = <type>();
<lambda>
>>

lambda_expression(otherIterationConstructs, relation, leftType, rightType, element, expression, emptyPredicate, hasCondition, conditionalPredicate, predicate) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<relation> = <relation>._union(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<element>, <expression>)));
<else>
if((<predicate>).booleanValue()) {
    <relation> = <relation>._union(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<element>, <expression>)));
}
<endif>
>>

lambda_function(function, parameters, returnType, expression) ::= <<
<returnType> <function>(<parameters; separator=", ">) {
    return <expression>;
}
>>

lambda_function_call(arg1, arg2, fromOtherMachine, otherMachine) ::= <<
<if(fromOtherMachine)><otherMachine>.<endif><arg1>(<arg2; separator=", ">)
>>

quantified_predicate(identifier, forall, predicate) ::= <<
BBoolean <identifier> = BBoolean(<if(forall)>true<else>false<endif>);
<predicate>
>>

quantified_predicate_evaluation(otherIterationConstructs, identifier, emptyPredicate, hasCondition, conditionalPredicate, predicate, forall) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = BBoolean(<if(forall)>false<else>true<endif>);
break;
<else>
if(<if(forall)>!<endif>(<predicate>).booleanValue()) {
    <identifier> = BBoolean(<if(forall)>false<else>true<endif>);
    break;
}
<endif>
>>

quantified_expression(identifier, identity, useBigInteger, leftType, rightType, subType, evaluation, isInteger, isRelation) ::= <<
<if(isInteger)>BInteger <identifier> = <if(useBigInteger)>BInteger("<identity>")<else>BInteger(<identity>)<endif>;<else>
<if(isRelation)>BRelation\<<leftType>, <rightType>\> <identifier> = BRelation\<<leftType>, <rightType>\>();<else>
BSet\<<subType>\> <identifier> = BSet\<<subType>\>();<endif><endif>

<evaluation>
>>

quantified_expression_evaluation(otherIterationConstructs, emptyPredicate, hasCondition, conditionalPredicate, predicate, identifier, operation, expression) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = <identifier>.<operation>(<expression>);
<else>
if((<predicate>).booleanValue()) {
    <identifier> = <identifier>.<operation>(<expression>);
}
<endif>
>>

parameter_combination_predicate(otherIterationConstructs, set, element, emptyPredicate, hasCondition, conditionalPredicate, predicate, subType) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<set> = <set>._union(BSet\<<subType>\>(<element>));
<else>
if((<predicate>).booleanValue()) {
    <set> = <set>._union(BSet\<<subType>\>(<element>));
}
<endif>
>>

transition(noParameters, noPredicate, identifier, subType, operationName, predicate, combination) ::= <<
<if(noParameters)>bool<else>BSet\<<subType>\><endif> _tr_<operationName>() const {
    <if(noParameters)>
    <if(noPredicate)>
    return true;
    <else>
    return (<predicate>).booleanValue();
    <endif>
    <else>
    BSet\<<subType>\> <identifier> = BSet\<<subType>\>();
    <combination>
    return <identifier>;
    <endif>
}
>>

invariant(invariantFunction, iterationConstruct, predicate) ::= <<
bool <invariantFunction>() const {
    <iterationConstruct; separator="\n">
    return (<predicate>).booleanValue();
}
>>

copy_constructor(machine, assignments) ::= <<
<machine>(const <machine>& copy) {
    <assignments; separator="\n">
}
>>

copy_assignment(variable) ::= <<
this-><variable> = copy.<variable>;
>>

copy_machine(machine) ::= <<
this-><machine> = copy.<machine>->_copy();
>>

copy(machine, parameters, operations) ::= <<
<machine> _copy() const {
    return <machine>(*this);
}
>>

if_expression_predicate(predicate, ifThen, ifElse) ::= <<
((<predicate>).booleanValue() ? <ifThen> : <ifElse>)
>>

set_enumeration(leftType, type, rightType, enums, isRelation) ::= <<
<if(isRelation)>(BRelation\<<leftType>, <rightType> >(<enums; separator=", ">))<else>(BSet<if(type)>\<<type> \><else>\<BObject\><endif>(<enums; separator=", ">))<endif>
>>

seq_enumeration(type, elements) ::= <<
(BRelation\<BInteger, <type> >(<elements; separator=", ">))
>>

enum_call(machine, class, identifier, isCurrentMachine) ::= <<
<if(isCurrentMachine)>(<class>(<class>::<identifier>))<else>(<machine>::<class>(<machine>::<class>::<identifier>))<endif>
>>

set_enum_declaration(name,enums) ::= <<
class <name> : public BObject {
    public:

        typedef <name> current_type;
        typedef void value_type;
        typedef void left_type;
        typedef void right_type;

        enum <name>_type {
            <enums;separator=", \n">
        };

        <name>_type value;

        <name>(){}

        <name>(const <name>_type& type) {
            this->value = type;
        }

        BBoolean equal(const <name>& o) const {
            return value == o.value;
        }

        BBoolean unequal(const <name>& o) const {
            return value != o.value;
        }

        friend bool operator ==(const <name>& p1, const <name>& p2) {
            return p1.value == p2.value;
        }

        friend bool operator !=(const <name>& p1, const <name>& p2) {
            return p1.value != p2.value;
        }

        void operator =(const <name>& other) {
            this->value = other.value;
        }

        friend std::ostream& operator\<\<(std::ostream &strm, const <name>& e) {
            switch(e.value) {
                <enums: {enum | case <enum>: return strm \<\< "<enum>";}; separator="\n">
            }
            return strm;
        }

        int hashCode() const {
            return (31 * 1) ^ (static_cast\<int>(value) \<\< 1);
        }
};
>>

bool() ::= <<
(BOOL)
>>

include_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

global_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>


choice_point_declaration(choicePoint, operation) ::= <<
>>

choice_point_getter(choicePoint, operation) ::= <<
>>


choice_point_operation_flag_declaration(operation) ::= <<
>>

choice_point_operation_triggered_declaration(operation) ::= <<
>>

choice_point_operation_flag_getter(operation) ::= <<
>>

choice_point_operation_flag_reset(operation) ::= <<
>>

choice_point_operation_triggered(operation) ::= <<
>>

choice_point_operation_triggered_reset(operation) ::= <<
>>

choice_point_operation_apply(machine, operation, applyChoicePoints, applyChoicePointFlag) ::= <<
>>

choice_point_operation_apply_choice_point(operation, choicePoint) ::=<<
>>

choice_point_operation_apply_choice_point_flag(operation) ::= <<
>>

constant_declaration(type, identifier) ::= <<
<type> <identifier>;
>>

constant_initialization(iterationConstruct, identifier, val) ::= <<
<iterationConstruct; separator="\n">
<identifier> = <val>;
>>

values(assignments) ::= <<
<assignments; separator="\n">
>>

parameter(type, identifier) ::= <<
const <type>& <identifier>
>>

parallel(loads, others) ::=<<
<loads; separator="\n">
<others; separator="\n">
>>

parallel_load(type, identifier) ::= <<
<type> _ld_<identifier> = <identifier>;
>>

assignment(leftType, rightType, iterationConstruct, identifier, modified_identifier, val, isIdentifierLhs, isRecordAccessLhs, arg) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <val>;<elseif(isRecordAccessLhs)><identifier> = <modified_identifier>.override_<arg>(<val>);<else><identifier> = <modified_identifier>.override(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<arg>,<val>)));<endif>
>>

function_call_range_element(expr, leftType, rightType, arg, val) ::= <<
(<expr>.override(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<arg>,<val>))))
>>

function_call_nested(expr, arg, isNested) ::= <<
(<if(!isNested)><expr><else><expr>.functionCall(<arg>)<endif>)
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(iterationConstruct, leftType, rightType, identifier, modified_identifier, set, isIdentifierLhs, isRecordAccessLhs, arg) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <set>.nondeterminism();<elseif(isRecordAccessLhs)><identifier> = <modified_identifier>.override_<arg>(<val>);<else><identifier> = <modified_identifier>.override(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<arg>,<set>.nondeterminism()));<endif>
>>

void() ::= <<
void
>>

void_type() ::= <<
BObject
>>

type(type, fromOtherMachine, fromOutside, otherMachine) ::= <<
<if(fromOtherMachine || fromOutside)><otherMachine>::<endif><type>
>>

tuple_type(leftType, rightType) ::=<<
BTuple\<<leftType>, <rightType> >
>>

set_type(type) ::=<<
BSet<if(type)>\<<type> \><else>\<BObject\><endif>
>>

relation_type(leftType, rightType) ::=<<
BRelation\<<leftType>, <rightType> >
>>

import_type(type, useBigInteger) ::= <<
<if(useBigInteger)>#include \<btypes_big_integer/<type>.hpp><else>#include \<btypes_primitives/<type>.hpp><endif>
>>

import_machine(machine) ::= <<
#include "<machine>.hpp"
>>

mc_info_type(type) ::= <<
<type>
>>


interval(arg1, arg2) ::= <<
(BSet\<BInteger>::interval(<arg1>,<arg2>))
>>

projection(domainType, rangeType, arg1, arg2, isProjection1) ::= <<
(BRelation\<<domainType>, <rangeType> >::<if(isProjection1)>projection1<else>projection2<endif>(<arg1>,<arg2>))
>>

projection_tuple(arg, isProjection1) ::= <<
(<arg>.<if(isProjection1)>projection1<else>projection2<endif>())
>>

identity(type, arg) ::= <<
(BRelation\<<type>, <type> >::identity(<arg>))
>>

cartesian_product(leftType, rightType, arg1, arg2) ::= <<
(BRelation\<<leftType>, <rightType> >::cartesianProduct(<arg1>, <arg2>))
>>

tuple_create(leftType, rightType, arg1, arg2) ::= <<
(BTuple\<<leftType>, <rightType> >(<arg1>, <arg2>))
>>

binary(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

or(arg1, arg2) ::= <<
(BBoolean(<arg1>.booleanValue() || <arg2>.booleanValue()))
>>

and(arg1, arg2) ::= <<
(BBoolean(<arg1>.booleanValue() && <arg2>.booleanValue()))
>>

implies(arg1, arg2) ::= <<
(BBoolean(!<arg1>.booleanValue() || <arg2>.booleanValue()))
>>

equivalent(arg1, arg2) ::= <<
(BBoolean((!<arg1>.booleanValue() || <arg2>.booleanValue()) && (!<arg2>.booleanValue() || <arg1>.booleanValue())))
>>

unary(operator, obj, args) ::= <<
<obj>.<operator>(<args; separator=", ">)
>>

pre_assert(isModelChecking, isTopLevel, iterationConstruct, predicate, then) ::= <<
<if(isModelChecking && !isTopLevel)>
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} else {
    throw PreconditionOrAssertionViolation();
}
<else>
<then>
<endif>
>>

select(isModelChecking, isTopLevel, iterationConstruct, predicate, then) ::= <<
<if(isModelChecking && isTopLevel)>
<then>
<else>
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} else {
    throw StateNotReachableError();
}
<endif>
>>

if(iterationConstruct, predicate, then, else1) ::= <<
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if((<predicate>).booleanValue()) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

choice(len, then, choice1) ::= <<
int index = rand() % <len>;
if(index == 0) {
    <then>
} <choice1; separator=" ">
>>


choice1(counter, then) ::= <<
else if(index == <counter>) {
    <then>
}
>>

choice2(then) ::= <<
else {
    <then>
}
>>

any(body) ::= <<
<body>
>>

any_body(otherIterationConstructs, emptyPredicate, predicate, body) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<body>
break;
<else>
if(<predicate>.booleanValue()) {
    <body>
    break;
}
<endif>
>>

becomes_such_that(loads, body) ::= <<
<loads; separator="\n">
<body>
>>

becomes_such_that_body(otherIterationConstructs, emptyPredicate, predicate, stores) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<stores>
break;
<else>
if((<predicate>).booleanValue()) {
    <stores>
    break;
}
<endif>
>>

becomes_such_that_load(type, lhs, rhs) ::= <<
<type> <lhs> = <rhs>;
>>

becomes_such_that_store(lhs, rhs) ::= <<
<lhs> = <rhs>;
>>

while(forModelChecking, iterationConstruct1, iterationConstruct2, predicate, then, variant, variantCounter, invariant) ::= <<
<iterationConstruct1; separator="\n">
BInteger _loop_variant_<variantCounter> = <variant>;
while((<predicate>).booleanValue()) {
    <then>
    <iterationConstruct2; separator="\n">
    <if(forModelChecking)>
    if(!(<invariant>.booleanValue())) {
        throw LoopInvariantViolation();
    }
    if(<variant>.greaterEqual(_loop_variant_<variantCounter>).booleanValue()) {
        throw VariantViolation();
    }
    _loop_variant_<variantCounter> = <variant>;
    <endif>
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>

boolean_val(val) ::= <<
<if(val)>(BBoolean(true))<else>(BBoolean(false))<endif>
>>

identifier(identifier, isReturn, isPrivate, rhsOnLhs, fromOtherMachine, otherMachine) ::= <<
<if(fromOtherMachine)><otherMachine>._get_<identifier>()<else><if(rhsOnLhs)>_ld_<identifier><else><identifier><endif><endif>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>(BInteger("<number>"))<else>(BInteger(<number>))<endif>
>>

infinite_predicate(arg, operator, rhsArguments) ::= <<
(<arg>.<operator>(<rhsArguments; separator=", ">))
>>

relation_predicate(predicates, checkElementOf) ::= <<
<if(checkElementOf)>(<predicates>)<else>((<predicates>)._not())<endif>
>>

relation_check_domain(arg, domain) ::= <<
(<arg>.checkDomain(<domain>))
>>

relation_check_range(arg, range) ::= <<
(<arg>.checkRange(<range>))
>>

relation_is_total(arg, domain) ::= <<
(<arg>.isTotal(<domain>))
>>

relation_is_partial(arg, domain) ::= <<
(<arg>.isPartial(<domain>))
>>

relation_function(arg, operator) ::= <<
(<arg>.<operator>())
>>

relation_surjection(arg, range) ::= <<
(<arg>.isSurjection(<range>))
>>

relation_injection(arg) ::= <<
(<arg>.isInjection())
>>

relation_bijection(arg, range) ::=<<
(<arg>.isBijection(<range>))
>>

string(string) ::= <<
(BString(<string>))
>>

operation_call_with_assignment_many_parameters(struct, var, machine, machineInstance, function, args, this, assignments) ::= <<
<machine>::<struct> <var> = <operation_call_without_assignment(machineInstance, function, args, this)>
<assignments; separator="\n">
>>

operation_call_assignment(var, record, field) ::= <<
<var> = <record>.get_<field>();
>>

operation_call_with_assignment_one_parameter(var, machineInstance, function, args, this) ::= <<
<var> = <operation_call_without_assignment(machineInstance, function, args, this)>
>>

operation_call_without_assignment(machineInstance, function, args, this) ::= <<
<if(this)>this-><else>this-><machineInstance>.<endif><function>(<args; separator=",">);
>>

skip() ::= <<
>>

enum_import() ::= <<
>>

modelchecker(machine, main, nextStates, invariantViolated, initializeCaches, printResult) ::= <<
class ModelChecker {
    private:
        <machine>::Type type;
        int threads;
        bool isCaching;
        bool isDebug;

        std::list\<<machine>\> unvisitedStates;
        std::unordered_set\<<machine>, <machine>::Hash, <machine>::HashEqual> states;
        std::atomic\<int> transitions;
        std::mutex mutex;
        std::mutex waitMutex;
        std::mutex cacheMutex;
        std::condition_variable waitCV;

        std::atomic\<bool> invariantViolatedBool;
        std::atomic\<bool> deadlockDetected;
        <machine> counterExampleState;

        <initializeCaches; separator="\n">

        std::unordered_map\<<machine>, <machine>, <machine>::Hash, <machine>::HashEqual> parents;

    public:
        ModelChecker() {}

        ModelChecker(<machine>::Type type, int threads, bool isCaching, bool isDebug) {
            this->type = type;
            this->threads = threads;
            this->isCaching = isCaching;
            this->isDebug = isDebug;
            this->invariantViolatedBool = false;
            this->deadlockDetected = false;
            this->transitions = 0;
        }

        <main>


    private:
        <machine> next() {
            {
                std::unique_lock\<std::mutex> lock(mutex);
                switch(type) {
                    case <machine>::BFS: {
                        <machine> state = unvisitedStates.front();
                        unvisitedStates.pop_front();
                        return state;
                    }
                    case <machine>::DFS: {
                        <machine> state = unvisitedStates.back();
                        unvisitedStates.pop_back();
                        return state;
                    }
                    case <machine>::MIXED: {
                        if(unvisitedStates.size() % 2 == 0) {
                            <machine> state = unvisitedStates.front();
                            unvisitedStates.pop_front();
                            return state;
                        } else {
                            <machine> state = unvisitedStates.back();
                            unvisitedStates.pop_back();
                            return state;
                        }
                    }
                }
                <machine> state = unvisitedStates.front();
                unvisitedStates.pop_front();
                return state;
            };
        }

        <nextStates>

        <invariantViolated>

        <printResult>
};
>>

model_check_next_states(machine, transitionsWithCaching, transitionsWithoutCaching) ::= <<
std::unordered_set\<<machine>, <machine>::Hash, <machine>::HashEqual> generateNextStates(const <machine>& state) {
    std::unordered_set\<<machine>, <machine>::Hash, <machine>::HashEqual> result = std::unordered_set\<<machine>, <machine>::Hash, <machine>::HashEqual>();
    if(isCaching) {
        <transitionsWithCaching>
    } else {
        <transitionsWithoutCaching>
    }
    return result;
}
>>

model_check_transition(machine, hasParameters, tupleType, transitionIdentifier, evalTransitions, execTransitions, isCaching) ::= <<
<if(hasParameters)>
<if(isCaching)>
<machine>::_ProjectionRead_<evalTransitions> read_<evalTransitions>_state = state._projected_state_for_<evalTransitions>();
{
    std::unique_lock\<std::mutex> _ProjectionRead_<evalTransitions>_lock(_ProjectionRead_<evalTransitions>_mutex);
    auto <transitionIdentifier>_ptr = _OpCache<evalTransitions>.find(read_<evalTransitions>_state);
    if(<transitionIdentifier>_ptr == _OpCache<evalTransitions>.end()) {
        BSet\<<tupleType>\> <transitionIdentifier> = state.<evalTransitions>();
        _OpCache<evalTransitions>.insert({read_<evalTransitions>_state, <transitionIdentifier>});
        for(const <tupleType>& param : <transitionIdentifier>) {
            <execTransitions>
        }
    } else {
        BSet\<<tupleType>\> <transitionIdentifier> = <transitionIdentifier>_ptr->second;
        for(const <tupleType>& param : <transitionIdentifier>) {
            <execTransitions>
        }
    }
}
<else>
BSet\<<tupleType>\> <transitionIdentifier> = state.<evalTransitions>();
for(const <tupleType>& param : <transitionIdentifier>) {
    <execTransitions>
}
<endif>
<else>
<if(isCaching)>
<machine>::_ProjectionRead_<evalTransitions> read_<evalTransitions>_state = state._projected_state_for_<evalTransitions>();
bool <transitionIdentifier> = false;
{
    std::unique_lock\<std::mutex> _ProjectionRead_<evalTransitions>_lock(_ProjectionRead_<evalTransitions>_mutex);
    auto _obj_<transitionIdentifier>_ptr = _OpCache<evalTransitions>.find(read_<evalTransitions>_state);
    if(_obj_<transitionIdentifier>_ptr == _OpCache<evalTransitions>.end()) {
        <transitionIdentifier> = state.<evalTransitions>();
        _OpCache<evalTransitions>.insert({read_<evalTransitions>_state, <transitionIdentifier>});
    } else {
        <transitionIdentifier> = _obj_<transitionIdentifier>_ptr->second;
    }
}
if(<transitionIdentifier>) {
    <execTransitions>
}
<else>
if(state.<evalTransitions>()) {
    <execTransitions>
}
<endif>
<endif>
>>

opreuse_declaration(type, variable) ::= <<
<type> <variable>;
>>

opreuse_parameter(type, variable) ::= <<
const <type>& <variable>
>>

opreuse_class(isRead, isGuard, isInvariant, name, declarations, parameters, variables) ::= <<
<if(isRead)>
<if(isGuard)>
class _ProjectionRead__tr_<name> {

    public:
        struct Hash {
            public:
                size_t operator()(const _ProjectionRead__tr_<name>& obj) const {
                    return obj.hashCode();
                }
        };

        struct HashEqual {
            public:
                bool operator()(const _ProjectionRead__tr_<name>& obj1, const _ProjectionRead__tr_<name>& obj2) const {
                    if (obj1 == obj2)
                        return true;
                    else
                        return false;
                    }
            };

        <declarations; separator="\n">

        _ProjectionRead__tr_<name>(<parameters; separator=", ">) {
            <variables:{variable | this-><variable> = <variable>;}; separator="\n">
        }

        friend bool operator ==(const _ProjectionRead__tr_<name>& o1, const _ProjectionRead__tr_<name>& o2) {
            <if(variables)>
            return <variables:{variable | o1.<variable> == (o2.<variable>)}; separator=" && ">;
            <else>
            return true;
            <endif>
        }

        friend bool operator !=(const _ProjectionRead__tr_<name>& o1, const _ProjectionRead__tr_<name>& o2) {
            <if(variables)>
            return <variables:{variable | o1.<variable> != (o2.<variable>)}; separator=" || ">;
            <else>
            return true;
            <endif>
        }

        friend std::ostream& operator\<\<(std::ostream &strm, const _ProjectionRead__tr_<name>& e) {
            strm \<\< "{";
            <if(variables)>
            <variables:{variable |strm \<\< "<variable>: " \<\< e.<variable>;}; separator="\nstrm \<\< \", \"; \n">;
            <endif>
            strm \<\< "}";
            return strm;
        }

        int hashCode() const {
            int result = 1;
            <variables: {variable | result = 31 * result + (<variable>.hashCode() \<\< 1);}; separator="\n">
            return result;
        }
};
<else>
<if(isInvariant)>
class _ProjectionRead_<name> {

    public:
        struct Hash {
            public:
                size_t operator()(const _ProjectionRead_<name>& obj) const {
                    return obj.hashCode();
                }
        };

        struct HashEqual {
            public:
                bool operator()(const _ProjectionRead_<name>& obj1, const _ProjectionRead_<name>& obj2) const {
                    if (obj1 == obj2)
                        return true;
                    else
                        return false;
                    }
            };

        <declarations; separator="\n">

        _ProjectionRead_<name>(<parameters; separator=", ">) {
            <variables:{variable | this-><variable> = <variable>;}; separator="\n">
        }

        friend bool operator ==(const _ProjectionRead_<name>& o1, const _ProjectionRead_<name>& o2) {
            <if(variables)>
            return <variables:{variable | o1.<variable> == (o2.<variable>)}; separator=" && ">;
            <else>
            return true;
            <endif>
        }

        friend bool operator !=(const _ProjectionRead_<name>& o1, const _ProjectionRead_<name>& o2) {
            <if(variables)>
            return <variables:{variable | o1.<variable> != (o2.<variable>)}; separator=" || ">;
            <else>
            return true;
            <endif>
        }

        friend std::ostream& operator\<\<(std::ostream &strm, const _ProjectionRead_<name>& e) {
            strm \<\< "{";
            <if(variables)>
            <variables:{variable |strm \<\< "<variable>: " \<\< e.<variable>;}; separator="\nstrm \<\< \", \";\n">;
            <endif>
            strm \<\< "}";
            return strm;
        }

        int hashCode() const {
            int result = 1;
            <variables: {variable | result = 31 * result + (<variable>.hashCode() \<\< 1);}; separator="\n">
            return result;
        }

};
<else>
class _ProjectionRead_<name> {

    public:
        struct Hash {
            public:
                size_t operator()(const _ProjectionRead_<name>& obj) const {
                    return obj.hashCode();
                }
        };

        struct HashEqual {
            public:
                bool operator()(const _ProjectionRead_<name>& obj1, const _ProjectionRead_<name>& obj2) const {
                    if (obj1 == obj2)
                        return true;
                    else
                        return false;
                    }
            };

        <declarations; separator="\n">

        _ProjectionRead_<name>(<parameters; separator=", ">) {
            <variables:{variable | this-><variable> = <variable>;}; separator="\n">
        }

        friend bool operator ==(const _ProjectionRead_<name>& o1, const _ProjectionRead_<name>& o2) {
            <if(variables)>
            return <variables:{variable | o1.<variable> == (o2.<variable>)}; separator=" && ">;
            <else>
            return true;
            <endif>
        }

        friend bool operator !=(const _ProjectionRead_<name>& o1, const _ProjectionRead_<name>& o2) {
            <if(variables)>
            return <variables:{variable | o1.<variable> != (o2.<variable>)}; separator=" || ">;
            <else>
            return true;
            <endif>
        }

        friend std::ostream& operator\<\<(std::ostream &strm, const _ProjectionRead_<name>& e) {
            strm \<\< "{";
            <if(variables)>
            <variables:{variable |strm \<\< "<variable>: " \<\< e.<variable>;}; separator="\nstrm \<\< \", \";\n">;
            <endif>
            strm \<\< "}";
            return strm;
        }

        int hashCode() const {
            int result = 1;
            <variables: {variable | result = 31 * result + (<variable>.hashCode() \<\< 1);}; separator="\n">
            return result;
        }

};
<endif>
<endif>
<else>
class _ProjectionWrite_<name> {

    public:
        struct Hash {
            public:
                size_t operator()(const _ProjectionWrite_<name>& obj) const {
                    return obj.hashCode();
                }
        };

        struct HashEqual {
            public:
                bool operator()(const _ProjectionWrite_<name>& obj1, const _ProjectionWrite_<name>& obj2) const {
                    if (obj1 == obj2)
                        return true;
                    else
                        return false;
                    }
            };

        <declarations; separator="\n">

        _ProjectionWrite_<name>(<parameters; separator=", ">) {
            <variables:{variable | this-><variable> = <variable>;}; separator="\n">
        }

        friend bool operator ==(const _ProjectionWrite_<name>& o1, const _ProjectionWrite_<name>& o2) {
            <if(variables)>
            return <variables:{variable | o1.<variable> == (o2.<variable>)}; separator=" && ">;
            <else>
            return true;
            <endif>
        }

        friend bool operator !=(const _ProjectionWrite_<name>& o1, const _ProjectionWrite_<name>& o2) {
            <if(variables)>
            return <variables:{variable | o1.<variable> != (o2.<variable>)}; separator=" || ">;
            <else>
            return true;
            <endif>
        }

        friend std::ostream& operator\<\<(std::ostream &strm, const _ProjectionWrite_<name>& e) {
            strm \<\< "{";
            <if(variables)>
            <variables:{variable |strm \<\< "<variable>: " \<\< e.<variable>;}; separator="\nstrm \<\< \", \";\n">;
            <endif>
            strm \<\< "}";
            return strm;
        }

        int hashCode() const {
            int result = 1;
            <variables: {variable | result = 31 * result + (<variable>.hashCode() \<\< 1);}; separator="\n">
            return result;
        }

};
<endif>
>>

opreuse_read_projection(operation, projectState) ::= <<
_ProjectionRead_<operation> _projected_state_for_<operation>() const {
    return _ProjectionRead_<operation>(<projectState; separator=",">);
}
>>

opreuse_grd_read_projection(operation, projectState) ::= <<
_ProjectionRead_<operation> _projected_state_for_<operation>() const {
    return _ProjectionRead_<operation>(<projectState; separator=",">);
}
>>

opreuse_inv_read_projection(invariant, projectState) ::= <<
_ProjectionRead_<invariant> _projected_state_for_<invariant>() const {
    return _ProjectionRead_<invariant>(<projectState; separator=",">);
}
>>

opreuse_write_projection(operation, projectState) ::= <<
_ProjectionWrite_<operation> _update_for_<operation>() const {
    return _ProjectionWrite_<operation>(<projectState; separator=",">);
}
>>

opreuse_apply_update(operation, projectState) ::= <<
void _apply_update_for_<operation>(const _ProjectionWrite_<operation>& update) {
    <projectState:{variable | this-><variable> = update.<variable>;}; separator="\n">
}
>>

opreuse_initialize_opcaches(machine, operation, hasParameters, tupleType) ::= <<
<if(hasParameters)>
std::unordered_map\<BSet\<<tupleType>\>, std::unordered_map\<<machine>::_ProjectionRead_<operation>, <machine>::_ProjectionWrite_<operation>, <machine>::_ProjectionRead_<operation>::Hash, <machine>::_ProjectionRead_<operation>::HashEqual\>, BSet\<<tupleType>\>::SetHash, BSet\<<tupleType>\>::SetHashEqual\> _OpCache_<operation>;
std::unordered_map\<<machine>::_ProjectionRead__tr_<operation>,  BSet\<<tupleType>\>, <machine>::_ProjectionRead__tr_<operation>::Hash, <machine>::_ProjectionRead__tr_<operation>::HashEqual\> _OpCache_tr_<operation>;
std::mutex _ProjectionRead_<operation>_mutex;
std::mutex _ProjectionRead__tr_<operation>_mutex;
<else>
std::unordered_map\<bool, std::unordered_map\<<machine>::_ProjectionRead_<operation>, <machine>::_ProjectionWrite_<operation>, <machine>::_ProjectionRead_<operation>::Hash, <machine>::_ProjectionRead_<operation>::HashEqual\>\> _OpCache_<operation>;
std::unordered_map\<<machine>::_ProjectionRead__tr_<operation>, bool, <machine>::_ProjectionRead__tr_<operation>::Hash, <machine>::_ProjectionRead__tr_<operation>::HashEqual\> _OpCache_tr_<operation>;
std::mutex _ProjectionRead_<operation>_mutex;
std::mutex _ProjectionRead__tr_<operation>_mutex;
<endif>
>>

opreuse_initialize_invariant_caches(machine, invariant) ::= <<
std::unordered_map\<<machine>::_ProjectionRead_<invariant>, bool, <machine>::_ProjectionRead_<invariant>::Hash, <machine>::_ProjectionRead_<invariant>::HashEqual> _InvCache_<invariant>;
std::mutex _ProjectionRead_<invariant>_mutex;
>>


model_check_transition_body(machine, operation, hasParameters, readParameters, parameters, transitionEval, isCaching) ::= <<
<if(hasParameters)>
<readParameters>
<endif>
<machine> copiedState = state._copy();
<if(isCaching)>
<machine>::_ProjectionRead_<operation> readState = state._projected_state_for_<operation>();
{
    std::unique_lock\<std::mutex> _ProjectionRead_<operation>_lock(_ProjectionRead_<operation>_mutex);
    auto _OpCache_with_parameter_<operation>_ptr = _OpCache_<operation>.find(<transitionEval>);
    if(_OpCache_with_parameter_<operation>_ptr == _OpCache_<operation>.end()) {
        copiedState.<operation>(<parameters; separator=", ">);
        <machine>::_ProjectionWrite_<operation> writeState = copiedState._update_for_<operation>();
        std::unordered_map\<<machine>::_ProjectionRead_<operation>, <machine>::_ProjectionWrite_<operation>, <machine>::_ProjectionRead_<operation>::Hash, <machine>::_ProjectionRead_<operation>::HashEqual\> _OpCache_with_parameter_<operation> = std::unordered_map\<<machine>::_ProjectionRead_<operation>, <machine>::_ProjectionWrite_<operation>, <machine>::_ProjectionRead_<operation>::Hash, <machine>::_ProjectionRead_<operation>::HashEqual\>();
        _OpCache_with_parameter_<operation>.insert({readState, writeState});
        _OpCache_<operation>.insert({<transitionEval>, _OpCache_with_parameter_<operation>});
    } else {
        std::unordered_map\<<machine>::_ProjectionRead_<operation>, <machine>::_ProjectionWrite_<operation>, <machine>::_ProjectionRead_<operation>::Hash, <machine>::_ProjectionRead_<operation>::HashEqual\> _OpCache_with_parameter_<operation> = _OpCache_with_parameter_<operation>_ptr->second;
        auto writeState_ptr = _OpCache_with_parameter_<operation>.find(readState);
        if(writeState_ptr != _OpCache_with_parameter_<operation>.end()) {
            <machine>::_ProjectionWrite_<operation> writeState = writeState_ptr->second;
            copiedState._apply_update_for_<operation>(writeState);
        } else {
            copiedState.<operation>(<parameters; separator=", ">);
            <machine>::_ProjectionWrite_<operation> writeState = copiedState._update_for_<operation>();
            _OpCache_with_parameter_<operation>.insert({readState, writeState});
        }
    }
}
<else>
copiedState.<operation>(<parameters; separator=", ">);
<endif>
copiedState.stateAccessedVia = "<operation>";
result.insert(copiedState);
{
    std::unique_lock\<std::mutex> lock(mutex);
    transitions += 1;
}
>>

model_check_transition_param_assignment(type, param, val, isLhs, oneParameter) ::= <<
<if(isLhs)>
<type> <param> = <val>.projection1();
<else>
<if(oneParameter)>
<type> <param> = <val>;
<else>
<type> <param> = <val>.projection2();
<endif>
<endif>
>>

model_check_invariants(machine, invariantViolated) ::= <<
bool invariantViolated(const <machine>& state) {
    <invariantViolated; separator="\n">
    return false;
}
>>

model_check_invariant(machine, invariant) ::= <<
bool <invariant> = true;
if(isCaching) {
    {
        std::unique_lock\<std::mutex> _ProjectionRead_<invariant>_lock(_ProjectionRead_<invariant>_mutex);
        <machine>::_ProjectionRead_<invariant> read_<invariant>_state = state._projected_state_for_<invariant>();
        auto _obj_<invariant>_ptr = _InvCache_<invariant>.find(read_<invariant>_state);
        if(_obj_<invariant>_ptr == _InvCache_<invariant>.end()) {
            <invariant> = state.<invariant>();
            _InvCache_<invariant>.insert({read_<invariant>_state, <invariant>});
        } else {
            <invariant> = _obj_<invariant>_ptr->second;
        }
    }
} else {
    <invariant> = state.<invariant>();
}
if(!<invariant>) {
  cout \<\< "INVARIANT CONJUNCT VIOLATED: <invariant>" \<\< "\n";
  return true;
}
>>

model_check_evaluate_state() ::= <<
>>

model_check_evaluate_variable() ::= <<
>>

model_check_print(machine) ::= <<
void printResult() {
    if(deadlockDetected || invariantViolatedBool) {
        if(deadlockDetected) {
            cout \<\< "DEADLOCK DETECTED" \<\< "\n";
        } else {
            cout \<\< "INVARIANT VIOLATED" \<\< "\n";
        }

        cout \<\< "COUNTER EXAMPLE TRACE: " \<\< "\n";

        std::string trace = "";
        while(parents.find(counterExampleState) != parents.end()) {
            std::stringstream stringStream;
            stringStream \<\< counterExampleState;
            trace.insert(0, stringStream.str());
            trace.insert(0, "\n");
            trace.insert(0, counterExampleState.stateAccessedVia);
            trace.insert(0, "\n\n");
            counterExampleState = parents[counterExampleState];
        }
        cout \<\< trace;
    } else {
        cout \<\< "MODEL CHECKING SUCCESSFUL" \<\< "\n";
    }

    cout \<\< "Number of States: " \<\< states.size() \<\< "\n";
    cout \<\< "Number of Transitions: " \<\< transitions \<\< "\n";
}
>>

model_check_init_static(map, keyy, entries) ::= <<
<map>.insert({"<keyy>", {<entries:{entry | "<entry>"}; separator=", ">}});
>>

model_check_main(machine, invariants) ::= <<
void modelCheck() {
    if (isDebug) {
        cout \<\< "Starting Modelchecking, STRATEGY=" \<\< type \<\< ", THREADS=" \<\< threads \<\< ", CACHING=" \<\< isCaching \<\< "\n";
    }

    if (threads \<= 1) {
        modelCheckSingleThreaded();
    } else {
        boost::asio::thread_pool workers(threads-1); // threads indicates the number of workers (without the coordinator)
        modelCheckMultiThreaded(workers);
    }
}

void modelCheckSingleThreaded() {
    <machine> machine = <machine>();
    states.insert(machine);
    unvisitedStates.push_back(machine);

    while(!unvisitedStates.empty()) {
        <machine> state = next();

        std::unordered_set\<<machine>, <machine>::Hash, <machine>::HashEqual> nextStates = generateNextStates(state);

        for(const <machine>& nextState : nextStates) {
            if(states.find(nextState) == states.end()) {
                states.insert(nextState);
                parents.insert({nextState, state});
                unvisitedStates.push_back(nextState);
                if(isDebug && states.size() % 50000 == 0) {
                    cout \<\< "VISITED STATES: " \<\< states.size() \<\< "\n";
                    cout \<\< "EVALUATED TRANSITIONS: " \<\< transitions \<\< "\n";
                    cout \<\< "-------------------" \<\< "\n";
                }
            }
        }

        if(invariantViolated(state)) {
            invariantViolatedBool = true;
            counterExampleState = state;
            break;
        }

        if(nextStates.empty()) {
            deadlockDetected = true;
            counterExampleState = state;
            break;
        }

    }
    printResult();
}

void modelCheckMultiThreaded(boost::asio::thread_pool& workers) {
    <machine> machine = <machine>();
    states.insert(machine);
    unvisitedStates.push_back(machine);

    std::atomic\<bool> stopThreads;
    stopThreads = false;
    std::atomic\<int> possibleQueueChanges;
    possibleQueueChanges = 0;

    std::atomic\<bool> waitFlag;
    waitFlag = true;

    while(!unvisitedStates.empty() && !stopThreads) {
        possibleQueueChanges += 1;
        <machine> state = next();
        std::packaged_task\<void()> task([&, state] {
            std::unordered_set\<<machine>, <machine>::Hash, <machine>::HashEqual> nextStates = generateNextStates(state);

            for(const <machine>& nextState : nextStates) {
                {
                    std::unique_lock\<std::mutex\> lock(mutex);
                    if(states.find(nextState) == states.end()) {
                        states.insert(nextState);
                        parents.insert({nextState, state});
                        unvisitedStates.push_back(nextState);
                        if(isDebug && states.size() % 50000 == 0) {
                            cout \<\< "VISITED STATES: " \<\< states.size() \<\< "\n";
                            cout \<\< "EVALUATED TRANSITIONS: " \<\< transitions \<\< "\n";
                            cout \<\< "-------------------" \<\< "\n";
                        }
                    }
                }
            }

            {
                std::unique_lock\<std::mutex> lock(mutex);
                possibleQueueChanges -= 1;
                int running = possibleQueueChanges;
                if (!unvisitedStates.empty() || running == 0) {
                    {
                        std::unique_lock\<std::mutex> lock(waitMutex);
                        waitFlag = false;
                        waitCV.notify_one();
                    }
                }
            }


            if(invariantViolated(state)) {
                invariantViolatedBool = true;
                counterExampleState = state;
                stopThreads = true;
            }

            if(nextStates.empty()) {
                deadlockDetected = true;
                counterExampleState = state;
                stopThreads = true;
            }

        });

        waitFlag = true;
        boost::asio::post(workers, std::move(task));

        {
            std::unique_lock\<std::mutex> lock(waitMutex);
            if(unvisitedStates.empty() && possibleQueueChanges > 0) {
                waitCV.wait(lock, [&] {
                    return waitFlag == false;
                });
            }
        }
    }
    workers.join();
    printResult();
}
>>

model_check_main_method(machine) ::= <<
int main(int argc, char *argv[]) {
    if(argc != 4) {
        cout \<\< "Number of arguments errorneous\n";
        return -1;
    }
    string strategy = argv[1];
    string numberThreads = argv[2];
    string caching = argv[3];

    <machine>::Type type;

    if(std::string("mixed").compare(strategy) == 0) {
        type = <machine>::Type::MIXED;
    } else if(std::string("bf").compare(strategy) == 0) {
        type = <machine>::Type::BFS;
    } else if (std::string("df").compare(strategy) == 0) {
        type = <machine>::Type::DFS;
    } else {
        cout \<\< "Input for strategy is wrong.\n";
        return -1;
    }

    int threads = 0;
    try {
        threads = std::stoi(numberThreads);
    } catch(std::invalid_argument e) {
        cout \<\< "Input for number of threads is wrong.\n";
        return -1;
    }

    if(threads \<= 0) {
        cout \<\< "Input for number of threads is wrong.\n";
        return -1;
    }

    bool isCaching = true;


    if(std::string("true").compare(caching) == 0) {
        isCaching = true;
    } else if(std::string("false").compare(caching) == 0) {
        isCaching = false;
    } else {
        cout \<\< "Input for caching is wrong.\n";
        return - 1;
    }

    bool isDebug = false;

    ModelChecker modelchecker(type, threads, isCaching, isDebug);
    modelchecker.modelCheck();

    return 0;
}
>>

record_private_variable_prefix() ::= <<
>>

include_initialization() ::= <<
>>

transition_cache_declaration(type, identifier, operationHasParams) ::= <<
>>

set_initialization(identifier, type, enums) ::= <<>>

external_function(name, parameters) ::= <<
>>
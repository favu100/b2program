keywords() ::= <<
Asm, auto, and, and_eq, bool, bitor, bitand, break, case, catch, char, class, compl, const, const_cast, continue, default, #define, delete, do, double, dynamic_cast, else, enum, exit(), explicit, export
extern, extern "C", false, float, for, union, unsigned, using, friend, goto, if, inline, int, long, mutable, virtual, namespace, new, not, not_eq, operator, or, or_eq, private, protected, public, register, void, reinterpret_cast,
return, short, signed, sizeof, static, static_cast, volatile, struct, switch, template, this, throw, true, try, typedef, typeid, union, unsigned, using, wchar_t, while, xor, xor_eq, size
>>


machine(imports, includedMachines, machine, structs, constants_declarations, includes, enums, sets, declarations, initialization, operations, addition, useBigInteger, getters) ::= <<
#include \<iostream>
#include \<string>
<if(useBigInteger)>#include \<btypes_big_integer/BUtils.hpp><else>#include \<btypes_primitives/BUtils.hpp><endif>
<imports; separator="\n">
<includedMachines; separator="\n">

#ifndef <machine>_H
#define <machine>_H

using namespace std;

class <machine> {

    public:

        <structs; separator="\n\n">

        <enums; separator="\n\n">

    private:

        <constants_declarations; separator="\n">

        <includes; separator="\n">

        <sets; separator="\n">

        <declarations; separator="\n">

    public:

        <initialization>

        <operations; separator="\n\n">

        <getters; separator="\n\n">
};

<addition>

#endif
>>

getter(returnType, variable) ::= <<
<returnType> _get_<variable>() {
    return <variable>;
}
>>

struct(name, declarations, parameters, initializations, functions, assignments, equalPredicates, unequalPredicates, values, fields) ::= <<
class <name> : public BStruct {
    private:
        <declarations; separator="\n">

    public:
        typedef <name> current_type;
        typedef void value_type;
        typedef void left_type;
        typedef void right_type;

        <name>(<parameters; separator=", ">) {
            <initializations; separator="\n">
        }

        <functions; separator="\n\n">

        <name>() {
        }

        void operator =(const <name>& other) {
            <assignments; separator="\n">
        }

        BBoolean equal(const <name>& o) const {
            return <equalPredicates; separator=" && ">;
        }

        BBoolean unequal(const <name>& o) const {
            return <unequalPredicates; separator=" || ">;
        }

        friend bool operator ==(const <name>& p1, const <name>& p2) {
            return (p1.equal(p2)).booleanValue();
        }

        friend bool operator !=(const <name>& p1, const <name>& p2) {
            return (p1.unequal(p2)).booleanValue();
        }

        friend std::ostream& operator\<\<(std::ostream &strm, const <name>& e) {
            strm \<\< "(";
            <values; separator="\n">
            strm \<\< ")";
            return strm;
        }

        int hashCode() const {
            int result = 1;
            <fields: {field | result = 31 * result + (<field>.hashCode() \<\< 1);}; separator="\n">
            return result;
        }
};
>>

record_field_get(type, field) ::= <<
<type> get_<field>() {
    return this-><field>;
}
>>

record_field_access(record, field) ::= <<
(<record>.get_<field>())
>>

record_access_nested(record, field, isNested) ::= <<
(<if(!isNested)><record><else><record>.get_<field>()<endif>)
>>

record_access_element(expr, arg, val) ::= <<
(<expr>.override_<arg>(<val>))
>>

record_field_override(name, field, type, val, parameters) ::= <<
<name> override_<field>(const <type>& <field>) {
    return <name>(<parameters; separator=", ">);
}
>>

record_assignment(identifier) ::= <<
this-><identifier> = other.<identifier>;
>>

record_equal_predicate(field) ::= <<
this-><field> == o.<field>
>>

record_unequal_predicate(field) ::= <<
this-><field> != o.<field>
>>

record_field_to_string(identifier) ::= <<
strm \<\< "<identifier> : ";
strm \<\< e.<identifier>;
>>

record_field_initialization(identifier) ::= <<
this-><identifier> = <identifier>;
>>

record(struct, parameters) ::= <<
(<struct>(<parameters; separator=", ">))
>>

initialization(machine, properties, values, body) ::= <<
<machine>() {
    <properties; separator="\n">
    <values; separator="\n">
    <body>
}
>>

method() ::= <<
>>

operation(returnType, operationName, parameters, locals, body, return) ::= <<
<returnType> <operationName>(<parameters; separator=", ">) {
    <locals; separator="\n">
    <body>
    <return>
}
>>

return(identifier) ::= <<
return <identifier>;
>>

no_return() ::=<<
>>

set_declaration(identifier, type, enums) ::= <<
#define <identifier> <set_enumeration("", type, "", enums, false)>
>>

iteration_construct_enumeration(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
for(<type> <identifier> : <set>) {
    <body>
}
>>

iteration_construct_assignment(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
for(<type> <identifier> : {<set>}) {
    <body>
}

>>

iteration_construct_subset(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
for(<type> <identifier> : <set>.pow()) {
    <body>
}
>>

iteration_construct_subsetneq(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
for(<type> <identifier> : <set>.pow().difference(<set>)) {
    <body>
}
>>

let_expression_predicate(type, identifier, body) ::= <<
<type> <identifier>;
<body>
>>

let_expression_predicate_body(otherIterationConstructs, identifier, val) ::= <<
<otherIterationConstructs>
<identifier> = <val>;
>>

set_comprehension(type, identifier, comprehension) ::= <<
<type> <identifier> = <type>();
<comprehension>
>>

set_comprehension_predicate(otherIterationConstructs, set, type, element, emptyPredicate, predicate, isRelation) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<set> = <set>._union(<type>(<element>));
<else>
if((<predicate>).booleanValue()) {
    <set> = <set>._union(<type>(<element>));
}
<endif>
>>

lambda(type, identifier, lambda) ::= <<
<type> <identifier> = <type>();
<lambda>
>>

lambda_expression(otherIterationConstructs, relation, leftType, rightType, element, expression, emptyPredicate, predicate) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<relation> = <relation>._union(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<element>, <expression>)));
<else>
if((<predicate>).booleanValue()) {
    <relation> = <relation>._union(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<element>, <expression>)));
}
<endif>
>>

quantified_predicate(identifier, forall, predicate) ::= <<
BBoolean <identifier> = BBoolean(<if(forall)>true<else>false<endif>);
<predicate>
>>

quantified_predicate_evaluation(otherIterationConstructs, identifier, emptyPredicate, predicate, forall) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = BBoolean(<if(forall)>false<else>true<endif>);
break;
<else>
if(<if(forall)>!<endif>(<predicate>).booleanValue()) {
    <identifier> = BBoolean(<if(forall)>false<else>true<endif>);
    break;
}
<endif>
>>

quantified_expression(identifier, identity, setType, evaluation, isInteger) ::= <<
<if(isInteger)>BInteger <identifier> = BInteger(<identity>);<else>BSet\<<setType>\> <identifier> = BSet\<<setType>\>();<endif>
<evaluation>
>>

quantified_expression_evaluation(otherIterationConstructs, emptyPredicate, predicate, identifier, operation, expression) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = <identifier>.<operation>(<expression>);
<else>
if((<predicate>).booleanValue()) {
    <identifier> = <identifier>.<operation>(<expression>);
}
<endif>
>>

if_expression_predicate(predicate, ifThen, ifElse) ::= <<
((<predicate>).booleanValue() ? <ifThen> : <ifElse>)
>>

set_enumeration(leftType, type, rightType, enums, isRelation) ::= <<
<if(isRelation)>(BRelation\<<leftType>, <rightType> >(<enums; separator=", ">))<else>(BSet\<<type> >(<enums; separator=", ">))<endif>
>>

seq_enumeration(type, elements) ::= <<
(BRelation\<BInteger, <type> >(<elements; separator=", ">))
>>

enum_call(machine, class, identifier, isCurrentMachine) ::= <<
<if(isCurrentMachine)>(<class>(<class>::<identifier>))<else>(<machine>::<class>(<machine>::<class>::<identifier>))<endif>
>>

set_enum_declaration(name,enums) ::= <<
class <name> : public BObject {
    public:

        typedef <name> current_type;
        typedef void value_type;
        typedef void left_type;
        typedef void right_type;

        enum <name>_type {
            <enums;separator=", \n">
        };

        <name>_type value;

        <name>(){}

        <name>(const <name>_type& type) {
            this->value = type;
        }

        BBoolean equal(const <name>& o) const {
            return value == o.value;
        }

        BBoolean unequal(const <name>& o) const {
            return value != o.value;
        }

        friend bool operator ==(const <name>& p1, const <name>& p2) {
            return p1.value == p2.value;
        }

        friend bool operator !=(const <name>& p1, const <name>& p2) {
            return p1.value != p2.value;
        }

        void operator =(const <name>& other) {
            this->value = other.value;
        }

        friend std::ostream& operator\<\<(std::ostream &strm, const <name>& e) {
            switch(e.value) {
                <enums: {enum | case <enum>: return strm \<\< "<enum>";}; separator="\n">
            }
        }

        int hashCode() const {
            return static_cast\<int>(value);
        }
};
>>

bool() ::= <<
(BOOL)
>>

include_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

global_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

constant_declaration(type, identifier) ::= <<
<type> <identifier>;
>>

constant_initialization(iterationConstruct, identifier, val) ::= <<
<iterationConstruct; separator="\n">
<identifier> = <val>;
>>

values() ::= <<
<assignments; separator="\n">
>>

parameter(type, identifier) ::= <<
const <type>& <identifier>
>>

parallel(loads, others) ::=<<
<loads; separator="\n">
<others; separator="\n">
>>

parallel_load(type, identifier) ::= <<
<type> _ld_<identifier> = <identifier>;
>>

assignment(leftType, rightType, iterationConstruct, identifier, modified_identifier, val, isIdentifierLhs, isRecordAccessLhs, arg) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <val>;<elseif(isRecordAccessLhs)><identifier> = <modified_identifier>.override_<arg>(<val>);<else><identifier> = <modified_identifier>.override(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<arg>,<val>)));<endif>
>>

function_call_range_element(expr, leftType, rightType, arg, val) ::= <<
(<expr>.override(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<arg>,<val>))))
>>

function_call_nested(expr, arg, isNested) ::= <<
(<if(!isNested)><expr><else><expr>.functionCall(<arg>)<endif>)
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(iterationConstruct, leftType, rightType, identifier, modified_identifier, set, isIdentifierLhs, isRecordAccessLhs, arg) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <set>.nondeterminism();<elseif(isRecordAccessLhs)><identifier> = <modified_identifier>.override_<arg>(<val>);<else><identifier> = <modified_identifier>.override(BRelation\<<leftType>, <rightType>\>(BTuple\<<leftType>, <rightType>\>(<arg>,<set>.nondeterminism()));<endif>
>>

void() ::= <<
void
>>

type(type, fromOtherMachine, otherMachine) ::= <<
<if(fromOtherMachine)><otherMachine>::<endif><type>
>>

tuple_type(leftType, rightType) ::=<<
BTuple\<<leftType>, <rightType> >
>>

set_type(type) ::=<<
BSet\<<type> >
>>

relation_type(leftType, rightType) ::=<<
BRelation\<<leftType>, <rightType> >
>>

import_type(type, useBigInteger) ::= <<
<if(useBigInteger)>#include \<btypes_big_integer/<type>.hpp><else>#include \<btypes_primitives/<type>.hpp><endif>
>>

import_machine(machine) ::= <<
#include "<machine>.hpp"
>>


interval(arg1, arg2) ::= <<
(BSet\<BInteger>::interval(<arg1>,<arg2>))
>>

projection(domainType, rangeType, arg1, arg2, isProjection1) ::= <<
(BRelation\<<domainType>, <rangeType> >::<if(isProjection1)>projection1<else>projection2<endif>(<arg1>,<arg2>))
>>

projection_tuple(arg, isProjection1) ::= <<
(<arg>.<if(isProjection1)>projection1<else>projection2<endif>())
>>

identity(type, arg) ::= <<
(BRelation\<<type>, <type> >::identity(<arg>))
>>

cartesian_product(leftType, rightType, arg1, arg2) ::= <<
(BRelation\<<leftType>, <rightType> >::cartesianProduct(<arg1>, <arg2>))
>>

tuple_create(leftType, rightType, arg1, arg2) ::= <<
(BTuple\<<leftType>, <rightType> >(<arg1>, <arg2>))
>>

binary(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

or(arg1, arg2) ::= <<
(BBoolean(<arg1>.booleanValue() || <arg2>.booleanValue()))
>>

and(arg1, arg2) ::= <<
(BBoolean(<arg1>.booleanValue() && <arg2>.booleanValue()))
>>

implies(arg1, arg2) ::= <<
(BBoolean(!<arg1>.booleanValue() || <arg2>.booleanValue()))
>>

equivalent(arg1, arg2) ::= <<
(BBoolean((!<arg1>.booleanValue() || <arg2>.booleanValue()) && (!<arg2>.booleanValue() || <arg1>.booleanValue())))
>>

unary(operator, obj, args) ::= <<
<obj>.<operator>(<args; separator=", ">)
>>

select(iterationConstruct, predicate, then) ::= <<
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
}
>>

if(iterationConstruct, predicate, then, else1) ::= <<
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if((<predicate>).booleanValue()) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

choice(len, then, choice1) ::= <<
int index = rand() % <len>;
if(index == 0) {
    <then>
} <choice1; separator=" ">
>>


choice1(counter, then) ::= <<
else if(index == <counter>) {
    <then>
}
>>

choice2(then) ::= <<
else {
    <then>
}
>>

any(body) ::= <<
<body>
>>

any_body(otherIterationConstructs, emptyPredicate, predicate, body) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<body>
break;
<else>
if(<predicate>.booleanValue()) {
    <body>
    break;
}
<endif>
>>

becomes_such_that(loads, body) ::= <<
<loads; separator="\n">
<body>
>>

becomes_such_that_body(otherIterationConstructs, emptyPredicate, predicate, stores) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<stores>
break;
<else>
if((<predicate>).booleanValue()) {
    <stores>
    break;
}
<endif>
>>

becomes_such_that_load(type, lhs, rhs) ::= <<
<type> <lhs> = <rhs>;
>>

becomes_such_that_store(lhs, rhs) ::= <<
<lhs> = <rhs>;
>>

while(iterationConstruct1, iterationConstruct2, predicate, then) ::= <<
<iterationConstruct1; separator="\n">
while((<predicate>).booleanValue()) {
    <then>
    <iterationConstruct2; separator="\n">
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>

boolean_val(val) ::= <<
<if(val)>(BBoolean(true))<else>(BBoolean(false))<endif>
>>

identifier(identifier, isReturn, isPrivate, rhsOnLhs, fromOtherMachine, otherMachine) ::= <<
<if(fromOtherMachine)><otherMachine>._get_<identifier>()<else><if(rhsOnLhs)>_ld_<identifier><else><identifier><endif><endif>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>(BInteger("<number>"))<else>(BInteger(<number>))<endif>
>>

infinite_predicate(arg, operator) ::= <<
(<arg>.<operator>())
>>

relation_predicate(predicates, checkElementOf) ::= <<
<if(checkElementOf)>(<predicates>)<else>((<predicates>)._not())<endif>
>>

relation_check_domain(arg, domain) ::= <<
(<arg>.checkDomain(<domain>))
>>

relation_check_range(arg, range) ::= <<
(<arg>.checkRange(<range>))
>>

relation_total_partial(arg, operator, domain) ::= <<
(<arg>.<operator>(<domain>))
>>

relation_function(arg, operator) ::= <<
(<arg>.<operator>())
>>

relation_surjection(arg, range) ::= <<
(<arg>.isSurjection(<range>))
>>

relation_injection(arg) ::= <<
(<arg>.isInjection())
>>

relation_bijection(arg, range) ::=<<
(<arg>.isBijection(<range>))
>>

string(string) ::= <<
(BString(<string>))
>>

operation_call_with_assignment_many_parameters(struct, var, machine, machineInstance, function, args, this, assignments) ::= <<
<machine>::<struct> <var> = <operation_call_without_assignment(machineInstance, function, args, this)>
<assignments; separator="\n">
>>

operation_call_assignment(var, record, field) ::= <<
<var> = <record>.get_<field>();
>>

operation_call_with_assignment_one_parameter(var, machineInstance, function, args, this) ::= <<
<var> = <operation_call_without_assignment(machineInstance, function, args, this)>
>>

operation_call_without_assignment(machineInstance, function, args, this) ::= <<
<if(this)>this-><else>this-><machineInstance>.<endif><function>(<args; separator=",">);
>>
machine(forModelChecking, props, imports, machine, structs, constants_declarations, includes, enums, sets, initialization, mainMethod, copyConstructor, operations, addition, getters, transitions, invariant, copy, hash_equal) ::= <<
:- use_module(evaluator).

<imports>
<structs>
<constants_declarations>
<includes>
<enums>
<addition>
start(st).

<props>

<invariant; separator="\n\n">

<initialization>

<operations; separator="\n">
>>

transition() ::= <<
>>

operation(operationName, parameters, body, lastStateCount, returnParameters) ::= <<
trans('<operationName>', State_0, State_<lastStateCount>) :-
    State_0 \= st,

    <body>.

>>

operation_call_with_assignment_many_parameters(struct, var, machine, machineInstance, function, args, this, assignments) ::= <<
% operation_call_with_assignment_many_parameters
>>

operation_call_assignment(var, record, field) ::= <<
% operation_call_assignment
>>

operation_call_with_assignment_one_parameter(var, machineInstance, function, args, this) ::= <<
% operation_call_with_assignment_one_parameter
>>

operation_call_without_assignment(machineInstance, function, args, this) ::= <<
% operation_call_without_assignment
>>

props(invariants) ::= <<
prop(st, uninitialized) :- !.
prop(State, unsafe) :-
    State \= st,
    \+ (<invariants:{it | <it>(State)}; separator=";\n\t\t">),
    !.
prop(State, List) :-
    State \= st,
    avl2List(State, List),
    !.
>>

assignment(identifier, val, stateCount, nextStateCount, lastExprCount, isFinalExpr) ::= <<
<if(isFinalExpr)>
update(<identifier>, <val>, State_<stateCount>, State_<nextStateCount>)<else>
<val>,
update(<identifier>, Expr_<lastExprCount>, State_<stateCount>, State_<nextStateCount>)<endif>
>>

binary(arg1, operator, arg2, exprCount, stateCount, returnsBool, exprBefore) ::= <<
<if(exprBefore)>
<exprBefore; separator=",\n">,
<endif>
<if(returnsBool)>
<operator>(State_<stateCount>, <arg1>, <arg2>)<else>
<operator>(State_<stateCount>, <arg1>, <arg2>, Expr_<exprCount>)<endif>
>>

bool() ::= <<
[true, false]
>>

boolean_val(val) ::= <<
<val>
>>

or(arg1, arg2) ::= <<
<arg1>;
<arg2>
>>

and(arg1, arg2) ::= <<
<arg1>,
<arg2>
>>

implies(arg1, arg2) ::= <<
\+ (<arg1>); <arg2>
>>

equivalent(arg1, arg2) ::= <<
((<arg1>, <arg2>);
(\+ <arg1>, \+ <arg2>)),
!
>>

cartesian_product(arg1, arg2) ::= <<
cartesianProduct(<arg1>, <arg2>, CartesianProduct)
>>

choice_point_declaration(choicePoint, operation) ::= <<
    % choice_point_declaration
>>

choice_point_getter(choicePoint, operation) ::= <<
    % choice_point_getter
>>

choice_point_operation_flag_declaration(operation) ::= <<
    % choice_point_operation_flag_declaration
>>

choice_point_operation_triggered_declaration(operation) ::= <<
    % choice_point_operation_triggered_declaration
>>

choice_point_operation_flag_getter(operation) ::= <<
    % choice_point_operation_flag_getter
>>

choice_point_operation_flag_reset(operation) ::= <<
    % choice_point_operation_flag_reset
>>

choice_point_operation_triggered(operation) ::= <<
    % choice_point_operation_triggered
>>

choice_point_operation_triggered_reset(operation) ::= <<
    % choice_point_operation_triggered_reset
>>

choice_point_operation_apply(machine, operation, applyChoicePoints, applyChoicePointFlag) ::= <<
    % choice_point_operation_apply
>>

choice_point_operation_apply_choice_point(operation, choicePoint) ::= <<
    % choice_point_operation_apply_choice_point
>>

choice_point_operation_apply_choice_point_flag(operation) ::= <<
    % choice_point_operation_apply_choice_point_flag
>>

constant_declaration(type, identifier) ::= <<
>>

constant_initialization(iterationConstruct, identifier, val) ::= <<
update(<identifier>, <val>),

>>

copy() ::= <<
    % copy
>>

copy_assignment() ::= <<
    % copy_assignment
>>

copy_constructor() ::= <<
    % copy_constructor
>>

else(then) ::= <<
<then>
>>

elseif(predicate, then) ::= <<
    % elseif
>>

enum_assignment(identifier, ExprCount) ::= <<
enum_<identifier>(Expr_<ExprCount>)
>>

enum_call(machine, class, identifier, isCurrentMachine) ::= <<
<if(isCurrentMachine)>
'<identifier>'<else>
% enum_call of other machine not implemented
<endif>
>>

getter() ::= <<
    % getter
>>

global_declaration(type, identifier) ::= <<
>>

identifier(identifier, isConstant, isParameter) ::= <<
<if(isParameter)>
P_<identifier><elseif(isConstant)>
<identifier><else>
'<identifier>'<endif>
>>

if(iterationConstruct, predicate, then, else1, forModelChecking, operation, choicePoint, usePreviousChoicePoint, previousChoicePoint) ::= <<
(<predicate> -> (<then>) ; (<else1>))
>>

import_type() ::= <<
>>

infinite_predicate(arg, operator, stateCount) ::= <<
<operator>(State_<stateCount>, <arg>)
>>

initialization(machine, properties, values, body, stateCount) ::= <<
trans(initialize, st, State_<stateCount>) :-
    empty(State_0),
    <values>
    <body>.
>>

interval(arg1, arg2) ::= <<
interval(<arg1>, <arg2>)
>>

invariant(invariantFunction, iterationConstruct, predicate) ::= <<
<invariantFunction>(State_0) :-
    <iterationConstruct>
    <predicate>.
>>

iteration_construct_enumeration(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
b_member(<identifier>, <set>),
<body>
>>

iteration_construct_assignment(otherIterationConstructs, type, identifier, set, body) ::= <<
    % iteration_construct_assignment
        <otherIterationConstructs>
        for(<type> <identifier> : Arrays.asList(<set>)) {
            <body>
        }

>>

iteration_construct_subset(otherIterationConstructs, type, identifier, set, body) ::= <<
    % iteration_construct_subset
>>

iteration_construct_subsetneq(otherIterationConstructs, type, identifier, set, body) ::= <<
    % iteration_construct_subsetneq
>>

keywords() ::= <<
>>

local_declaration() ::= <<
    % local_declaration
>>

machine_equal() ::= <<
    % machine_equal
>>

machine_equal_predicate() ::= <<
>>

machine_hash() ::= <<
>>

machine_hash_assignment() ::= <<
>>

machine_unequal() ::= <<
>>

machine_unequal_predicate() ::= <<
>>

machine_string() ::= <<
    % machine_string
>>

mc_info_type(isSet, machine, type) ::= <<
    % mc_info_type
>>

method() ::= <<
    % method
>>

modelchecker() ::= <<
>>

model_check_add_cached_infos() ::= <<
>>

model_check_init_static() ::= <<
>>

model_check_invariant() ::= <<
>>

model_check_invariants() ::= <<
>>

model_check_main() ::= <<
>>

model_check_main_method() ::= <<
>>

model_check_next_states() ::= <<
>>

model_check_print() ::= <<
>>

model_check_transition() ::= <<
>>

model_check_transition_body() ::= <<
>>

model_check_transition_param_assignment(type, param, val, isLhs, oneParameter) ::= <<
>>

no_return() ::= <<
>>

number(number) ::= <<
<number>
>>

parallel(loads, others) ::=<<
<others; separator=", \n">
>>

parallel_load(type, identifier) ::= <<
<type>

<identifier>
>>

parameter(type, identifier) ::= <<
P_<identifier>
>>

parameter_combination_predicate(otherIterationConstructs, set, element, emptyPredicate, predicate, subType) ::= <<
        % parameter_combination_predicate
        otherIterationConstruct: <otherIterationConstruct>
        set: <set>
        element: <element>
        emptyPredicate: <emptyPredicate>
        predicate: <predicate>
        subType: <subType>

>>

pre_assert(predicate, then) ::= <<
<predicate>,

<then>
>>

quantified_predicate(identifier, forall, hasCondition, conditionalPredicate, predicate) ::= <<
<if(hasCondition)>
<conditionalPredicate>
<endif>
<if(forall)>
findall(X, (<predicate>), All),
length(All, 0),
<else>
<predicate>
<endif>
>>

quantified_predicate_evaluation(otherIterationConstructs, identifier, emptyPredicate, predicate, forall) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = new BBoolean(<if(forall)>false<else>true<endif>);
break;
<else>
<if(forall)>
\+ <predicate>
<else>
<predicate>,
<endif>
<endif>
>>

quantified_expression(identifier, identity, useBigInteger, setType, hasCondition, conditionalPredicate, evaluation, isInteger) ::= <<
    % quantified_expression
>>

quantified_expression_evaluation(otherIterationConstructs, emptyPredicate, predicate, identifier, operation, expression) ::= <<
    % quantified_expression_evaluation
    otherIterationConstructs: <otherIterationConstructs>
    emptyPredicate: <emptyPredicate>
    predicate: <predicate>
    identifier: <identifier>
    operation: <operation>
    expression: <expression>
>>

relation_bijection(arg, range) ::=<<
    % relation_bijection
>>

relation_check_domain(arg, domain) ::= <<
    % relation_check_domain
>>

relation_check_range(arg, range) ::= <<
    % relation_check_range
>>

relation_function(arg, operator) ::= <<
    % relation_function
>>

relation_injection(arg) ::= <<
    % relation_injection
>>

relation_predicate(predicates, checkElementOf) ::= <<
    % relation_predicate:predicates
    <predicates>

    % relation_predicate:checkElementOf
    <checkElementOf>
>>

relation_surjection(arg, range) ::= <<
    % relation_surjection
>>

relation_total_partial(arg, operator, domain) ::= <<
    % relation_total_partial
>>

relation_type(leftType, rightType) ::= <<
    % relation_type
    leftType: <leftType>
    rightType: <rightType>
>>

return() ::= <<
    % return
>>

select(isModelChecking, isTopLevel, iterationConstruct, predicate, then) ::= <<
<predicate>,
<then>
>>

seq_enumeration(type, elements) ::= <<
    % seq_enumeration
>>

set_declaration(identifier, type, enums) ::= <<
    % set_declaration:identifier
    <identifier>

    % set_declaration:type
    <type>

    % set_declaration:enums
    <enums>
>>

set_enumeration(leftType, type, rightType, enums, isRelation, exprCount, isParameter) ::= <<
<if(isParameter)>
<if(isRelation)>
bRel([<enums; separator=", ">])<else>
bSet([<enums; separator=", ">])<endif>
<else>
<if(isRelation)>
Expr_<exprCount> = bRel([<enums; separator=", ">])<else>
Expr_<exprCount> = bSet([<enums; separator=", ">])<endif>
<endif>
>>

set_enum_declaration(name, enumsCounted, exprCount) ::= <<
enum_<name>(bSet([<enumsCounted.keys:{k | '<enumsCounted.(k)>'}; separator=", ">])).

>>

set_type(type) ::= <<
    % set_type
>>

tuple_create(arg1, arg2) ::= <<
(<arg1>/<arg2>)
>>

tuple_type(leftType, rightType) ::= <<
    % tuple_type:leftType
    <leftType>

    % tuple_type:rightType
    <rightType>

>>

type(type, fromOtherMachine, otherMachine) ::= <<
    <type>
>>

unary(operator, obj, args, exprCount, stateCount, exprBefore) ::= <<
<if(exprBefore)>
<exprBefore; separator=",\n">,
<endif>
<if(args)>
<operator>(State_<stateCount>, <obj>, <args>, Expr_<exprCount>)<else>
<operator>(State_<stateCount>, <obj>, Expr_<exprCount>)<endif>
>>

values(assignments) ::= <<
    % values
    <assignments; separator="\n">
>>

void() ::= <<
    % void
>>

while(iterationConstruct1, iterationConstruct2, predicate, then) ::= <<
% while
<iterationConstruct1; separator="\n">
<predicate>,

% do
<then>
>>
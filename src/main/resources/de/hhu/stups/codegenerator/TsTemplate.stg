keywords() ::= <<
abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, try, void, volatile, while, true, false, null, var, const, goto, size
>>


machine(forModelChecking, forVisualisation, imports, includedMachines, projectionClasses, machine, structs, constants_declarations, includes, enums, enum_imports, sets, declarations, initialization, copyConstructor, operations, addition, getters, transitions, projection, invariant, copy, hash_equal, modelcheck, mainMethod, lambdaFunctions) ::= <<
<imports; separator="\n">
<enum_imports; separator="\n">
<includedMachines; separator="\n">
import {BUtils} from "./btypes/BUtils.js";
import {SelectError} from "./btypes/BUtils.js";
import {PreconditionOrAssertionViolation} from "./btypes/BUtils.js";
import {VariantViolation} from "./btypes/BUtils.js";
import {LoopInvariantViolation} from "./btypes/BUtils.js";
<if(forModelChecking)>
import * as immutable from "./immutable/dist/immutable.es.js";
import {LinkedList} from  "./modelchecking/LinkedList.js";
<endif>


<enums; separator="\n\n">

<structs; separator= "\n\n">

<projectionClasses; separator= "\n\n">

<if(forModelChecking)>
export enum Type {
    BFS,
    DFS,
    MIXED
}
<endif>

export default class <machine> {

    <if(forModelChecking)>
    parent: <machine>;
    stateAccessedVia: string;
    <endif>

    <includes; separator="\n">

    <constants_declarations; separator="\n">

    <sets; separator="\n">

    <declarations; separator="\n">

    <initialization>

    <if(forModelChecking || forVisualisation)>
    <copyConstructor>
    <endif>

    <operations; separator="\n\n">

    <getters; separator="\n\n">

    <hash_equal; separator="\n\n">

    <if(forModelChecking)>
    <transitions; separator="\n\n">

    <projection; separator="\n\n">

    <invariant; separator="\n\n">

    <endif>

    <if(forModelChecking || forVisualisation)>
    <copy>
    <endif>

    <lambdaFunctions; separator="\n\n">

}

<if(forModelChecking && !forVisualisation)>

<modelcheck>

<mainMethod>
<endif>

<addition>
>>

machine_unequal() ::= <<
>>

machine_unequal_predicate() ::= <<
>>

machine_equal(machine, predicates) ::= <<
equals(o: any): boolean {
    let o1: <machine> = this;
    let o2: <machine> = o as <machine>;
    <if(predicates)>
    return <predicates; separator= " && ">;
    <else>
    return true;
    <endif>
}
>>

machine_equal_predicate(var) ::= <<
o1.<var>().equals(o2.<var>())
>>

machine_hash(assignments1, assignments2) ::= <<
hashCode(): number {
    return this._hashCode_1();
}

_hashCode_1(): number {
    let result: number = 1;
    <assignments1; separator= "\n">
    return result;
}

_hashCode_2(): number {
    let result: number = 1;
    <assignments2; separator= "\n">
    return result;
}
>>

machine_hash_assignment(primeNumber, var) ::= <<
result = (<primeNumber> * result) ^ ((this.<var>()).hashCode() \<\< 1);
>>

getter(returnType, variable, isConstant, machineName) ::= <<
_get_<variable>(): <returnType> {
    return <if(isConstant)><machineName>.<else>this.<endif><variable>;
}
>>

struct(name, declarations, parameters, initializations, functions, equalPredicates, unequalPredicates, fields, values) ::= <<
class <name> extends BStruct {
    <declarations; separator="\n">

    constructor(<parameters; separator=", ">) {
        super();
        <initializations; separator="\n">
    }

    <functions; separator="\n\n">

    equal(o: <name>): BBoolean {
        return new BBoolean(<equalPredicates; separator=" && ">);
    }

    unequal(o: <name>): BBoolean {
        return new BBoolean(<unequalPredicates; separator=" || ">);
    }

    toString(): string {
        return "(" + <values; separator=" + \",\" + "> + ")";
    }

    equals(other: any): boolean {
        if(!(other instanceof <name>)) {
            return false;
        }
        let o: <name> = other as <name>;
        return <equalPredicates; separator= " && ">;
    }

    hashCode(): number {
        let result: number = 1;
        <fields: {field | result = 31 * result + (this.<field>.hashCode() \<\< 1);}; separator="\n">
        return result;
    }

    isRecord() {
        return new BBoolean(true);
    }

    isNotRecord() {
        return new BBoolean(false);
    }
}
>>

record_field_get(type, field) ::= <<
get_<field>(): <type> {
    return this.<field>;
}
>>

record_field_access(record, field) ::= <<
<record>.get_<field>()
>>

record_access_nested(record, field, isNested) ::= <<
<if(!isNested)><record><else><record>.get_<field>()<endif>
>>

record_access_element(expr, arg, val) ::= <<
<expr>.override_<arg>(<val>)
>>

record_field_override(name, field, type, val, parameters) ::= <<
override_<field>(<field>: <type>): <name> {
    return new <name>(<parameters; separator=", ">);
}
>>

record_field_initialization(identifier) ::= <<
this.<identifier> = <identifier>;
>>

record_assignment(identifier) ::= <<
>>

record_field_to_string(identifier) ::= <<
"<identifier> : " + this.<identifier>
>>

record_equal_predicate(field) ::= <<
this.<field> === o.<field>
>>

record_unequal_predicate(field) ::= <<
this.<field> !== o.<field>
>>

record(struct, parameters) ::= <<
new <struct>(<parameters; separator=", ">)
>>

initialization(machine, properties, values, copy, body, iterationConstruct, propertiesCheck, forVisualization, forModelChecking) ::= <<
<if(properties)>
<if(values)>
static {
    <properties; separator="\n">
    <values>
    <if(propertiesCheck)>
    <iterationConstruct; separator="\n">
    if(!(<propertiesCheck>).booleanValue()) {
        throw new Error("Contradiction in PROPERTIES detected!");
    }
    <endif>
}
<endif>
<endif>

<if(forVisualization || forModelChecking)>
constructor(copy? : <machine>) {
    if(copy) {
        <copy; separator="\n">
    } else {
        <body>
    }
}
<else>
constructor() {
    <body>
}
<endif>
>>

method() ::= <<
>>

operation(returnType, operationName, parameters, locals, body, return) ::= <<
<operationName>(<parameters; separator=", ">): <returnType> {
    <locals; separator="\n">
    <body>
    <return>
}
>>

return(identifier) ::= <<
return <identifier>;
>>

no_return() ::=<<
>>

set_declaration(identifier, type, enums) ::= <<
private static <identifier>: BSet\<<type>\> = <set_enumeration("", type, "", enums, false)>;
>>

set_enumeration(leftType, type, rightType, enums, isRelation) ::= <<
<if(isRelation)>new BRelation\<<leftType>, <rightType>\><else>new BSet<if(type)>\<<type>\><else>\<BObject\><endif><endif>(<enums; separator=", ">)
>>

seq_enumeration(type, elements) ::= <<
new BRelation\<BInteger, <type>\>(<elements; separator=", ">)
>>

iteration_construct_enumeration(otherIterationConstructs, type, identifier, set, body, hasCondition, conditionalPredicate) ::= <<
<otherIterationConstructs>
<if(hasCondition)>
if(<conditionalPredicate>.booleanValue()) {
    for(let <identifier> of <set>) {
        <body>
    }
}
<else>
for(let <identifier> of <set>) {
    <body>
}
<endif>
>>

iteration_construct_assignment(otherIterationConstructs, type, identifier, set, body, hasCondition, conditionalPredicate) ::= <<
<otherIterationConstructs>
<if(hasCondition)>
if(<conditionalPredicate>.booleanValue()) {
    for(let <identifier> of Array.of(<set>)) {
        <body>
    }
}
<else>
for(let <identifier> of Array.of(<set>)) {
    <body>
}
<endif>
>>

iteration_construct_subset(otherIterationConstructs, type, identifier, set, body, hasCondition, conditionalPredicate) ::= <<
<otherIterationConstructs>
<if(hasCondition)>
if(<conditionalPredicate>.booleanValue()) {
    for(let <identifier> of <set>.pow()) {
        <body>
    }
}
<else>
for(let <identifier> of <set>.pow()) {
    <body>
}
<endif>
>>

iteration_construct_subsetneq(otherIterationConstructs, type, identifier, set, body, hasCondition, conditionalPredicate) ::= <<
<otherIterationConstructs>
<if(hasCondition)>
if(<conditionalPredicate>.booleanValue()) {
    for(let <identifier> of <set>.pow().difference(new BSet\<<type>\>(<set>))) {
        <body>
    }
}
<else>
for(let <identifier> of <set>.pow().difference(new BSet\<<type>\>(<set>))) {
    <body>
}
<endif>
>>

iteration_construct_pruning(predicate, body) ::= <<
if(<predicate>.booleanValue()) {
    <body>
}
>>

let_expression_predicate(type, identifier, body, isJavaScript) ::= <<
let <identifier><if(!isJavaScript)>: <type><endif> = null;
<body>
>>

let_expression_predicate_body(otherIterationConstructs, hasCondition, conditionalPredicate, identifier, val) ::= <<
<otherIterationConstructs>
<identifier> = <val>;
>>

set_comprehension(type, identifier, isRelation, leftType, rightType, subType, comprehension, isJavaScript) ::= <<
let <identifier><if(!isJavaScript)>: <type><endif> = new <if(isRelation)>BRelation\<<leftType>, <rightType>\><else>BSet\<<subType>\><endif>();
<comprehension>
>>

set_comprehension_predicate(otherIterationConstructs, set, element, emptyPredicate, hasCondition, conditionalPredicate, predicate, isRelation, leftType, rightType, subType) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<set> = <set>.union(new <if(isRelation)>BRelation\<<leftType>, <rightType>\><else>BSet\<<subType>\><endif>(<element>));
<else>
if((<predicate>).booleanValue()) {
    <set> = <set>.union(new <if(isRelation)>BRelation\<<leftType>, <rightType>\><else>BSet\<<subType>\><endif>(<element>));
}
<endif>
>>

lambda(type, identifier, lambda, leftType, rightType, isJavaScript) ::= <<
let <identifier><if(!isJavaScript)>: <type><endif> = new BRelation\<<leftType>, <rightType>\>();
<lambda>
>>

lambda_expression(otherIterationConstructs, relation, element, expression, emptyPredicate, hasCondition, conditionalPredicate, predicate, leftType, rightType) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<relation> = <relation>.union(new BRelation\<<leftType>, <rightType>\>(new BTuple(<element>, <expression>)));
<else>
if((<predicate>).booleanValue()) {
    <relation> = <relation>.union(new BRelation\<<leftType>, <rightType>\>(new BTuple(<element>, <expression>)));
}
<endif>
>>

lambda_function(function, parameters, returnType, expression) ::= <<
<function>(<parameters; separator=", ">): <returnType> {
    return <expression>;
}
>>

lambda_function_call(arg1, arg2, fromOtherMachine, otherMachine) ::= <<
<if(fromOtherMachine)>this.<otherMachine>.<endif><arg1>(<arg2; separator=", ">)
>>

quantified_predicate(identifier, forall, predicate, isJavaScript) ::= <<
let <identifier><if(!isJavaScript)>: BBoolean<endif> = new BBoolean(<if(forall)>true<else>false<endif>);
<predicate>
>>

quantified_predicate_evaluation(otherIterationConstructs, identifier, emptyPredicate, hasCondition, conditionalPredicate, predicate, forall) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = new BBoolean(<if(forall)>false<else>true<endif>);
break;
<else>
if(<if(forall)>!<endif>(<predicate>).booleanValue()) {
    <identifier> = new BBoolean(<if(forall)>false<else>true<endif>);
    break;
}
<endif>
>>

quantified_expression(identifier, identity, subType, leftType, rightType, evaluation, isInteger, isRelation, isJavaScript) ::= <<
<if(isInteger)>let <identifier><if(!isJavaScript)>: BInteger<endif> = new BInteger(<identity>);<else>
<if(isRelation)>let <identifier>: BRelation\<<leftType>, <rightType>\> = new BRelation\<<leftType>, <rightType>\>();
<else>let <identifier>: <if(!isJavaScript)>BSet\<<subType>\><endif> = new BSet\<<subType>\>();<endif><endif>

<evaluation>
>>

quantified_expression_evaluation(otherIterationConstructs, emptyPredicate, hasCondition, conditionalPredicate, predicate, identifier, operation, expression) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = <identifier>.<operation>(<expression>);
<else>
if((<predicate>).booleanValue()) {
    <identifier> = <identifier>.<operation>(<expression>);
}
<endif>
>>

parameter_combination_predicate(otherIterationConstructs, set, element, emptyPredicate, hasCondition, conditionalPredicate, predicate, subType) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<set> = <set>.union(new BSet\<<subType>\>(<element>));
<else>
if((<predicate>).booleanValue()) {
    <set> = <set>.union(new BSet\<<subType>\>(<element>));
}
<endif>
>>

transition(noParameters, noPredicate, identifier, subType, operationName, predicate, combination, isJavaScript) ::= <<
_tr_<operationName>(): <if(noParameters)>boolean<else>BSet\<<subType>\><endif> {
    <if(noParameters)>
    <if(noPredicate)>
    return true;
    <else>
    return <predicate>.booleanValue();
    <endif>
    <else>
    let <identifier><if(!isJavaScript)>: BSet\<<subType>\><endif> = new BSet\<<subType>\>();
    <combination>
    return <identifier>;
    <endif>
}
>>

invariant(invariantFunction, iterationConstruct, predicate) ::= <<
<invariantFunction>() {
    <iterationConstruct; separator="\n">
    return <predicate>.booleanValue();
}
>>

copy_constructor() ::= <<
>>

copy_assignment(variable) ::= <<
this.<variable> = copy.<variable>;
>>

copy_machine(machine) ::= <<
this.<machine> = copy.<machine>._copy();
>>


copy(machine) ::= <<
public _copy(): <machine> {
  return new <machine>(this);
}
>>

if_expression_predicate(predicate, ifThen, ifElse) ::= <<
(<predicate>.booleanValue() ? <ifThen> : <ifElse>)
>>

enum_call(machine, class, identifier, isCurrentMachine) ::= <<
<if(isCurrentMachine)>new <class>(enum_<class>.<identifier>)<else>new <class>(enum_<class>.<identifier>)<endif>
>>

set_enum_declaration(name,enums) ::= <<
export enum enum_<name> {
    <enums; separator=",\n">
}

export class <name> implements BObject{
    value: enum_<name>;

    constructor(value: enum_<name>) {
        this.value = value;
    }

    equal(other: <name>) {
        return new BBoolean(this.value === other.value);
    }

    unequal(other: <name>) {
        return new BBoolean(this.value !== other.value);
    }

    equals(o: any) {
        if(!(o instanceof <name>)) {
            return false;
        }
        return this.value === o.value;
    }

    hashCode() {
        return (31 * 1) ^ (this.value \<\< 1);
    }

    toString() {
        return enum_<name>[this.value].toString();
    }

    <enums : {enum | static get_<enum> () {return new <name>(enum_<name>.<enum>);\}<\n>}>

}
>>

bool() ::= <<
BUtils.BOOL
>>

include_declaration(type, identifier) ::= <<
<declaration(type, identifier)> = new <type>();
>>

global_declaration(type, identifier) ::= <<
private <declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
let <declaration(type, identifier)> = null;
>>


choice_point_declaration(choicePoint, operation) ::= <<
>>

choice_point_getter(choicePoint, operation) ::= <<
>>


choice_point_operation_flag_declaration(operation) ::= <<
>>

choice_point_operation_triggered_declaration(operation) ::= <<
>>

choice_point_operation_flag_getter(operation) ::= <<
>>

choice_point_operation_flag_reset(operation) ::= <<
>>

choice_point_operation_triggered(operation) ::= <<
>>

choice_point_operation_triggered_reset(operation) ::= <<
>>

choice_point_operation_apply(machine, operation, applyChoicePoints, applyChoicePointFlag) ::= <<
>>

choice_point_operation_apply_choice_point(operation, choicePoint) ::=<<
>>

choice_point_operation_apply_choice_point_flag(operation) ::= <<
>>


constant_declaration(type, identifier) ::= <<
private static <identifier>: <type>;
>>

constant_initialization(iterationConstruct, identifier, val, machineName) ::= <<
<iterationConstruct; separator="\n">
<machineName>.<identifier> = <val>;
>>

values(assignments) ::= <<
<assignments; separator="\n">
>>

declaration(type, identifier) ::= <<
<identifier>: <type>
>>

parameter(type, identifier) ::= <<
<identifier>: <type>
>>

parallel(loads, others) ::=<<
<loads; separator="\n">
<others; separator="\n">
>>

parallel_load(type, identifier, name) ::= <<
let _ld_<name>: <type> = <identifier>;
>>

assignment(iterationConstruct, identifier, modified_identifier, val, isIdentifierLhs, isRecordAccessLhs, arg, leftType, rightType) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <val>;<elseif(isRecordAccessLhs)><identifier> = <modified_identifier>.override_<arg>(<val>);<else><identifier> = <modified_identifier>.override(new BRelation\<<leftType>, <rightType>\>(new BTuple\<<leftType>, <rightType>\>(<arg>,<val>)));<endif>
>>

function_call_range_element(expr, leftType, rightType, arg, val) ::= <<
<expr>.override(new BRelation\<<leftType>, <rightType>\>(new BTuple\<<leftType>, <rightType>\>(<arg>,<val>)))
>>

function_call_nested(expr, arg, isNested) ::= <<
<if(!isNested)><expr><else><expr>.functionCall(<arg>)<endif>
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(iterationConstruct, identifier, modified_identifier, set, isIdentifierLhs, isRecordAccessLhs, arg, leftType, rightType) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <set>.nondeterminism();<elseif(isRecordAccessLhs)><identifier> = <modified_identifier>.override_<arg>(<set>.nondeterminism());<else><identifier> = <modified_identifier>.override(new BRelation\<<leftType>, <rightType>\>(new BTuple(<arg>,<set>.nondeterminism()));<endif>
>>

void() ::= <<
void
>>

void_type() ::= <<
BObject
>>

type(type, fromOtherMachine, otherMachine) ::= <<
<type>
>>

tuple_type(leftType, rightType) ::= <<
BTuple\<<leftType>, <rightType>\>
>>

set_type(type) ::=<<
BSet<if(type)>\<<type>\><else>\<BObject\><endif>
>>

relation_type(leftType, rightType) ::=<<
BRelation\<<leftType>, <rightType>\>
>>

import_type(type) ::= <<
import {<type>} from './btypes/<type>.js';
>>

import_machine(machine) ::= <<
import <machine> from './<machine>.js';
>>

mc_info_type(isSet, machine, type) ::= <<
<if(isSet)><machine>$<type><else>de.hhu.stups.btypes.<type><endif>
>>


interval(arg1, arg2) ::= <<
BSet.interval(<arg1>, <arg2>)
>>

projection(arg1, arg2, isProjection1) ::= <<
BRelation.<if(isProjection1)>projection1<else>projection2<endif>(<arg1>,<arg2>)
>>

projection_tuple(arg, isProjection1) ::= <<
<arg>.<if(isProjection1)>projection1<else>projection2<endif>()
>>

identity(arg) ::= <<
BRelation.identity(<arg>)
>>

cartesian_product(arg1, arg2) ::= <<
BRelation.cartesianProduct(<arg1>, <arg2>)
>>

tuple_create(arg1, arg2) ::= <<
new BTuple(<arg1>, <arg2>)
>>

binary(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

or(arg1, arg2) ::= <<
new BBoolean(<arg1>.booleanValue() || <arg2>.booleanValue())
>>

and(arg1, arg2) ::= <<
new BBoolean(<arg1>.booleanValue() && <arg2>.booleanValue())
>>

implies(arg1, arg2) ::= <<
new BBoolean(!<arg1>.booleanValue() || <arg2>.booleanValue())
>>

equivalent(arg1, arg2) ::= <<
new BBoolean((!<arg1>.booleanValue() || <arg2>.booleanValue()) && (!<arg2>.booleanValue() || <arg1>.booleanValue()))
>>

unary(operator, obj, args) ::= <<
<obj>.<operator>(<args; separator=", ">)
>>

pre_assert(isModelChecking, isTopLevel, iterationConstruct, predicate, then) ::= <<
<if(isModelChecking && !isTopLevel)>
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} else {
    throw new PreconditionOrAssertionViolation("Precondition or Assertion Error occured.");
}
<else>
<then>
<endif>
>>

select(isModelChecking, isTopLevel, iterationConstruct, predicate, then) ::= <<
<if(isModelChecking && isTopLevel)>
<then>
<else>
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} else {
    throw new SelectError("Parameters are invalid!");
}
<endif>
>>

if(iterationConstruct, predicate, then, else1) ::= <<
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if((<predicate>).booleanValue()) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

choice(len, then, choice1) ::= <<
var index = Math.floor(Math.random() * <len>);
if(index == 0) {
    <then>
} <choice1; separator=" ">
>>


choice1(counter, then) ::= <<
else if(index == <counter>) {
    <then>
}
>>

choice2(then) ::= <<
else {
    <then>
}
>>

any(body) ::= <<
<body>
>>

any_body(otherIterationConstructs, emptyPredicate, hasCondition, conditionalPredicate, predicate, body) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<body>
break;
<else>
if((<predicate>).booleanValue()) {
    <body>
    break;
}
<endif>
>>

becomes_such_that(loads, body) ::= <<
<loads; separator="\n">
<body>
>>

becomes_such_that_body(otherIterationConstructs, emptyPredicate, hasCondition, conditionalPredicate, predicate, stores) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<stores>
break;
<else>
if((<predicate>).booleanValue()) {
    <stores>
    break;
}
<endif>
>>

becomes_such_that_load(type, lhs, rhs) ::= <<
let <lhs>: <type> = <rhs>;
>>

becomes_such_that_store(lhs, rhs) ::= <<
<lhs> = <rhs>;
>>

while(forModelChecking, iterationConstruct1, iterationConstruct2, predicate, then, variant, variantCounter, invariant) ::= <<
<iterationConstruct1; separator="\n">
let _loop_variant_<variantCounter> : BInteger = <variant>;
while((<predicate>).booleanValue()) {
    <then>
    <iterationConstruct2; separator="\n">
    <if(forModelChecking)>
    if(!(<invariant>.booleanValue())) {
        throw new LoopInvariantViolation("WHILE loop invariant is violated.");
    }
    if(<variant>.greaterEqual(_loop_variant_<variantCounter>).booleanValue()) {
        throw new VariantViolation("WHILE loop invariant is violated.");
    }
    _loop_variant_<variantCounter> = <variant>;
    <endif>
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>

boolean_val(val) ::= <<
<if(val)>new BBoolean(true)<else>new BBoolean(false)<endif>
>>

identifier(identifier, rhsOnLhs, fromOtherMachine, otherMachine, isPrivate, isConstant, isDefiningLdVariable, forVisualization, machine) ::= <<
<if(forVisualization)><if(fromOtherMachine)>this.<otherMachine>._get_<identifier>()<else>machine._get_<identifier>()<endif><else><if(fromOtherMachine)>this.<otherMachine>._get_<identifier>()<else><if(rhsOnLhs)>_ld_<identifier><else><if(!isDefiningLdVariable)><if(isConstant)><machine>.<else><if(isPrivate)>this.<endif><endif><endif><identifier><endif><endif><endif>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>new BInteger(<number>n)<else>new BInteger(<number>)<endif>
>>

infinite_predicate(arg, operator, rhsArguments) ::= <<
<arg>.<operator>(<rhsArguments; separator=", ">)
>>

relation_predicate(predicates, checkElementOf) ::= <<
<if(checkElementOf)><predicates><else><predicates>.not()<endif>
>>

relation_check_domain(arg, domain) ::= <<
<arg>.checkDomain(<domain>)
>>

relation_check_range(arg, range) ::= <<
<arg>.checkRange(<range>)
>>

relation_is_total(arg, domain) ::= <<
<arg>.isTotal(<domain>)
>>

relation_is_partial(arg, domain) ::= <<
<arg>.isPartial(<domain>)
>>

relation_function(arg, operator) ::= <<
<arg>.<operator>()
>>

relation_surjection(arg, range) ::= <<
<arg>.isSurjection(<range>)
>>

relation_injection(arg) ::= <<
<arg>.isInjection()
>>

relation_bijection(arg, range) ::=<<
<arg>.isBijection(<range>)
>>

string(string) ::= <<
new BString(<string>)
>>

operation_call_with_assignment_many_parameters(struct, var, machine, machineInstance, function, args, this, assignments) ::= <<
let <var> = <operation_call_without_assignment(machineInstance, function, args, this)>
<assignments; separator="\n">
>>

operation_call_assignment(var, record, field) ::= <<
<var> = <record>.get_<field>();
>>

operation_call_with_assignment_one_parameter(var, machineInstance, function, args, this) ::= <<
<var> = <operation_call_without_assignment(machineInstance, function, args, this)>
>>

operation_call_without_assignment(machineInstance, function, args, this) ::= <<
<if(this)>this.<else>this.<machineInstance>.<endif><function>(<args; separator=",">);
>>

skip() ::= <<
>>

enum_import(name, machineName) ::= <<
import {enum_<name>} from "./<machineName>.js"
import {<name>} from "./<machineName>.js"
>>

record_private_variable_prefix() ::= <<
this.
>>


modelchecker(machine, main, initializeCaches, nextStates, invariantViolated, printResult) ::= <<
export class ModelChecker {
    private type: Type;
    private isCaching: boolean;
    private isDebug: boolean;

    private unvisitedStates: LinkedList\<<machine>\> = new LinkedList\<<machine>\>;
    private states: immutable.Set\<<machine>\> = new immutable.Set();
    private transitions: number = 0;

    private invariantViolated: boolean = false;
    private deadlockDetected: boolean = false;
    private counterExampleState: <machine> = undefined;

    <initializeCaches; separator="\n">

    constructor(type: Type, isCaching: boolean, isDebug: boolean) {
        this.type = type;
        this.isCaching = isCaching;
        this.isDebug = isDebug;
    }

    <main>

    next(): <machine> {
        switch(this.type) {
            case Type.BFS:
                return this.unvisitedStates.popFront();
            case Type.DFS:
                return this.unvisitedStates.popBack();
            case Type.MIXED:
                if(this.unvisitedStates.length % 2 == 0) {
                    return this.unvisitedStates.popFront();
                } else {
                    return this.unvisitedStates.popBack();
                }
            default:
                break;
        }
        return undefined;
    }

    <nextStates>

    <invariantViolated>

    <printResult>
}

>>

model_check_next_states(machine, transitionsWithCaching, transitionsWithoutCaching) ::= <<
generateNextStates(state: <machine>): Set\<<machine>\> {
    let result: immutable.Set\<<machine>\> = immutable.Set();
    if(this.isCaching) {
        <transitionsWithCaching>
    } else {
        <transitionsWithoutCaching>
    }
    return result;
}
>>

model_check_transition(hasParameters, tupleType, transitionIdentifier, evalTransitions, execTransitions, isCaching) ::= <<
<if(hasParameters)>
<if(isCaching)>
let read_<evalTransitions>_state : _ProjectionRead_<evalTransitions> = state._projected_state_for_<evalTransitions>();
let <transitionIdentifier> : BSet\<<tupleType>\>  = this._OpCache<evalTransitions>.get(read_<evalTransitions>_state);
if(<transitionIdentifier> == null) {
    <transitionIdentifier> = state.<evalTransitions>();
    this._OpCache<evalTransitions> = this._OpCache<evalTransitions>.set(read_<evalTransitions>_state, <transitionIdentifier>);
}

for(let param of <transitionIdentifier>) {
    <execTransitions>
}
<else>
let <transitionIdentifier>: BSet\<<tupleType>\> = state.<evalTransitions>();
for(let param of <transitionIdentifier>) {
    <execTransitions>
}
<endif>
<else>
<if(isCaching)>
let read_<evalTransitions>_state : _ProjectionRead_<evalTransitions> = state._projected_state_for_<evalTransitions>();
let _obj_<transitionIdentifier>: any = this._OpCache<evalTransitions>.get(read_<evalTransitions>_state);
let <transitionIdentifier>: boolean;
if(_obj_<transitionIdentifier> == null) {
    <transitionIdentifier> = state.<evalTransitions>();
    this._OpCache<evalTransitions> = this._OpCache<evalTransitions>.set(read_<evalTransitions>_state, <transitionIdentifier>);
} else {
    <transitionIdentifier> = _obj_<transitionIdentifier>;
}

if(<transitionIdentifier>) {
    <execTransitions>
}
<else>
if(state.<evalTransitions>()) {
    <execTransitions>
}
<endif>
<endif>
>>

opreuse_declaration(type, variable) ::= <<
public <variable>: <type>;
>>

opreuse_parameter(type, variable) ::= <<
<variable> : <type>
>>

opreuse_class(isRead, isGuard, isInvariant, name, declarations, parameters, variables) ::= <<
<if(isRead)>
<if(isGuard)>
class _ProjectionRead__tr_<name> {

    <declarations; separator="\n">

    constructor(<parameters; separator=", ">) {
        <variables:{variable | this.<variable> = <variable>;}; separator="\n">
    }

    equals(other: any): boolean {
        let o1: _ProjectionRead__tr_<name> = this;
        let o2: _ProjectionRead__tr_<name> = other as _ProjectionRead__tr_<name>;
        <if(variables)>
        return <variables:{variable | o1.<variable>.equals(o2.<variable>)}; separator=" && ">;
        <else>
        return true;
        <endif>
    }

    hashCode(): number {
        let result: number = 1;
        <variables: {variable | result = 31 * result + (this.<variable>.hashCode() \<\< 1);}; separator="\n">
        return result;
    }
}
<else>
<if(isInvariant)>
class _ProjectionRead_<name> {

    <declarations; separator="\n">

    constructor(<parameters; separator=", ">) {
        <variables:{variable | this.<variable> = <variable>;}; separator="\n">
    }

    equals(other: any): boolean {
        let o1: _ProjectionRead_<name> = this;
        let o2: _ProjectionRead_<name> = other as _ProjectionRead_<name>;
        <if(variables)>
        return <variables:{variable | o1.<variable>.equals(o2.<variable>)}; separator=" && ">;
        <else>
        return true;
        <endif>
    }

    hashCode(): number {
        let result: number = 1;
        <variables: {variable | result = 31 * result + (this.<variable>.hashCode() \<\< 1);}; separator="\n">
        return result;
    }
}
<else>
class _ProjectionRead_<name> {

    <declarations; separator="\n">

    constructor(<parameters; separator=", ">) {
        <variables:{variable | this.<variable> = <variable>;}; separator="\n">
    }

    equals(other: any): boolean {
        let o1: _ProjectionRead_<name> = this;
        let o2: _ProjectionRead_<name> = other as _ProjectionRead_<name>;
        <if(variables)>
        return <variables:{variable | o1.<variable>.equals(o2.<variable>)}; separator=" && ">;
        <else>
        return true;
        <endif>
    }

    hashCode(): number {
        let result: number = 1;
        <variables: {variable | result = 31 * result + (this.<variable>.hashCode() \<\< 1);}; separator="\n">
        return result;
    }
}
<endif>
<endif>
<else>
class _ProjectionWrite_<name> {

    <declarations; separator="\n">

    constructor(<parameters; separator=", ">) {
        <variables:{variable | this.<variable> = <variable>;}; separator="\n">
    }

    equals(other: any): boolean {
        let o1: _ProjectionWrite_<name> = this;
        let o2: _ProjectionWrite_<name> = other as _ProjectionWrite_<name>;
        <if(variables)>
        return <variables:{variable | o1.<variable>.equals(o2.<variable>)}; separator=" && ">;
        <else>
        return true;
        <endif>
    }

    hashCode(): number {
        let result: number = 1;
        <variables: {variable | result = 31 * result + (this.<variable>.hashCode() \<\< 1);}; separator="\n">
        return result;
    }
}
<endif>
>>

opreuse_read_projection(operation, projectState) ::= <<
_projected_state_for_<operation>(): _ProjectionRead_<operation> {
    return new _ProjectionRead_<operation>(<projectState:{variable |this.<variable>}; separator=",">);
}
>>

opreuse_grd_read_projection(operation, projectState) ::= <<
_projected_state_for_<operation>(): _ProjectionRead_<operation> {
    return new _ProjectionRead_<operation>(<projectState:{variable |this.<variable>}; separator=",">);
}
>>

opreuse_inv_read_projection(invariant, projectState) ::= <<
_projected_state_for_<invariant>(): _ProjectionRead_<invariant> {
    return new _ProjectionRead_<invariant>(<projectState:{variable |this.<variable>}; separator=",">);
}
>>

opreuse_write_projection(operation, projectState) ::= <<
_update_for_<operation>(): _ProjectionWrite_<operation> {
    return new _ProjectionWrite_<operation>(<projectState:{variable |this.<variable>}; separator=",">);
}
>>

opreuse_apply_update(operation, projectState) ::= <<
_apply_update_for_<operation>(update : _ProjectionWrite_<operation>): void {
    <projectState:{variable | this.<variable> = update.<variable>;}; separator="\n">
}
>>

opreuse_initialize_opcaches(operation, hasParameters, tupleType) ::= <<
<if(hasParameters)>
_OpCache_<operation>: immutable.Map\<BSet\<<tupleType>\>, immutable.Map\<_ProjectionRead_<operation>, _ProjectionWrite_<operation>\>\> = new immutable.Map();
_OpCache_tr_<operation>: immutable.Map\<_ProjectionRead__tr_<operation>, BSet\<<tupleType>\>\> = new immutable.Map();
<else>
_OpCache_<operation>: immutable.Map\<boolean, immutable.Map\<_ProjectionRead_<operation>, _ProjectionWrite_<operation>\>\> = new immutable.Map();
_OpCache_tr_<operation>: immutable.Map\<_ProjectionRead__tr_<operation>, boolean\> = new immutable.Map();
<endif>
>>

opreuse_initialize_invariant_caches(invariant) ::= <<
_InvCache_<invariant>: immutable.Map\<_ProjectionRead_<invariant>, boolean\> = new immutable.Map();
>>


model_check_transition_body(machine, operation, hasParameters, readParameters, parameters, transitionEval, isCaching) ::= <<
<if(hasParameters)>
<readParameters>
<endif>
let copiedState: <machine> = state._copy();
<if(isCaching)>
let readState: _ProjectionRead_<operation> = state._projected_state_for_<operation>();
let _OpCache_with_parameter_<operation>: immutable.Map = this._OpCache_<operation>.get(<transitionEval>);
if(_OpCache_with_parameter_<operation> != null) {
    let writeState: _ProjectionWrite_<operation> = _OpCache_with_parameter_<operation>.get(readState);
    if(writeState != null) {
        copiedState._apply_update_for_<operation>(writeState);
        copiedState.parent = state;
    } else {
        copiedState.<operation>(<parameters; separator=", ">);
        copiedState.parent = state;
        writeState = copiedState._update_for_<operation>();
        _OpCache_with_parameter_<operation> = _OpCache_with_parameter_<operation>.set(readState, writeState);
        this._OpCache_<operation> = this._OpCache_<operation>.set(<transitionEval>, _OpCache_with_parameter_<operation>);
    }

} else {
    copiedState.<operation>(<parameters; separator=", ">);
    copiedState.parent = state;
    let writeState : _ProjectionWrite_<operation> = copiedState._update_for_<operation>();
    _OpCache_with_parameter_<operation> = new immutable.Map().set(readState, writeState);
    this._OpCache_<operation> = this._OpCache_<operation>.set(<transitionEval>, _OpCache_with_parameter_<operation>);
}
<else>
copiedState.<operation>(<parameters; separator=", ">);
<endif>
result = result.add(copiedState);
this.transitions = this.transitions + 1;
>>

model_check_transition_param_assignment(type, param, val, isLhs, oneParameter) ::= <<
<if(isLhs)>
let <param>: <type> = <val>.projection1();
<else>
<if(oneParameter)>
let <param>: <type> = <val>;
<else>
let <param>: <type> = <val>.projection2();
<endif>
<endif>
>>

model_check_invariants(machine, invariantViolated) ::= <<
invViolated(state: <machine>): boolean {
    <invariantViolated; separator="\n">
    return false;
}
>>

model_check_invariant(invariant) ::= <<
let <invariant>: boolean;
if(isCaching) {
    let read_<invariant>_state: _ProjectionRead_<invariant> = state._projected_state_for_<invariant>();
    let _obj_<invariant>: boolean = this._InvCache_<invariant>.get(read_<invariant>_state);
    if(_obj_<invariant> == null) {
        <invariant> = state.<invariant>();
        this._InvCache_<invariant> = this._InvCache_<invariant>.set(read_<invariant>_state, <invariant>);
    } else {
        <invariant> = _obj_<invariant>;
    }
} else {
    <invariant> = state.<invariant>();
}
if(!<invariant>) {
    console.log("INVARIANT CONJUNCT VIOLATED: <invariant>");
    return true;
}
>>

model_check_evaluate_state(machine, variables) ::= <<
>>

model_check_evaluate_variable(getter) ::= <<
state.set("<getter>", machine.<getter>());
>>

model_check_print(machine) ::= <<
printResult(states: number, transitions: number): void {
    if(this.invariantViolated || this.deadlockDetected) {
        if(this.deadlockDetected) {
            console.log("DEADLOCK DETECTED");
        } else {
            console.log("INVARIANT VIOLATED");
        }

        console.log("COUNTER EXAMPLE TRACE: ");
        let sb: string = '';
        while(this.counterExampleState != null) {
            sb = this.counterExampleState + '\n' + sb;
            if(this.counterExampleState.stateAccessedVia != null) {
                sb = this.counterExampleState.stateAccessedVia + sb;
            }
            sb = '\n\n' + sb;
            this.counterExampleState = this.counterExampleState.parent;
        }
        console.log(sb);
    } else {
        console.log("MODEL CHECKING SUCCESSFUL");
    }

    console.log("Number of States: " + this.states.size);
    console.log("Number of Transitions: " + this.transitions);
}
>>

model_check_init_static(map, keyy, entries) ::= <<
this.<map> = this.<map>.set("<keyy>", immutable.Set([<entries:{entry | "<entry>"}; separator=", ">]));
>>

model_check_main(machine, invariants) ::= <<
modelCheck(): void {
    if (this.isDebug) {
        console.log("Starting Modelchecking, STRATEGY=" + this.type + ", CACHING=" + this.isCaching);
    }
    this.modelCheckSingleThreaded();
}

modelCheckSingleThreaded(): void {
    let machine: <machine> = new <machine>();
    this.states = this.states.add(machine);
    this.unvisitedStates.pushBack(machine);

    while(!(this.unvisitedStates.length === 0)) {
        let state: <machine> = this.next();

        let nextStates: Set\<<machine>\> = this.generateNextStates(state);

        for(let nextState of nextStates) {
            if(!this.states.has(nextState)) {
                this.states = this.states.add(nextState);
                this.unvisitedStates.pushBack(nextState);
                if(this.states.size % 50000 == 0 && this.isDebug) {
                    console.log("VISITED STATES: " + this.states.size);
                    console.log("EVALUATED TRANSITIONS: " + this.transitions);
                    console.log("-------------------");
                }
            }
        }

        if(this.invViolated(state)) {
            this.invariantViolated = true;
            this.counterExampleState = state;
            break;
        }

        if(nextStates.size == 0) {
            this.deadlockDetected = true;
            this.counterExampleState = state;
            break;
        }

    }
    this.printResult(this.states.size, this.transitions);
}
>>

model_check_main_method(machine) ::= <<
let args : string[] = process.argv;
if(args.length > 5) {
    console.log("Expecting 3 command-line arguments: STRATEGY CACHING DEBUG");
    process.exit(-1);
}
let type: Type = Type.MIXED;
let threads: number = 0;
let isCaching: boolean = false;
let isDebug: boolean = false;

if(args.length > 2) {
    if("mixed" === args[2]) {
        type = Type.MIXED;
    } else if("bf" === args[2]) {
        type = Type.BFS;
    } else if ("df" === args[2]) {
        type = Type.DFS;
    } else {
        console.log("Value for command-line argument STRATEGY is wrong.");
        console.log("Expecting mixed, bf or df.");
        process.exit(-1);
    }
}
if(args.length > 3) {
    try {
        isCaching = JSON.parse(args[3].toLowerCase());
    } catch(e) {
        console.log("Value for command-line argument CACHING is not a boolean.");
        process.exit(-1);
    }
}
if(args.length > 4) {
    try {
        isDebug = JSON.parse(args[4].toLowerCase());
    } catch(e) {
        console.log("Value for command-line argument DEBUG is not a boolean.");
        process.exit(-1);
    }
}
let modelchecker: ModelChecker = new ModelChecker(type, isCaching, isDebug);
modelchecker.modelCheck();
>>

machine_string(variables) ::= <<
/* TODO
toString(): string {
    <if(variables)>
    return String.join("\n", <variables:{var | "<var>: " + (this.<var>()).toString()}; separator=", ">);
    <else>
    return "";
    <endif>
}
*/
>>

include_initialization() ::= <<
>>

transition_cache_declaration(type, identifier, operationHasParams) ::= <<
>>

set_initialization(identifier, type, enums) ::= <<>>

external_function(name, parameters) ::= <<
>>
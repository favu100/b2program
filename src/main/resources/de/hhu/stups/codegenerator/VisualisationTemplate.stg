keywords() ::= <<
document, false, for, function, import, true, var
>>


visualisation(imports, machineName, svgName, svgElements, events, visualUpdates, importedEnums, machineEnums, variables, constants, sets, invariant, invariantCount, variableUpdates, includedMachines) ::= <<
import <machineName> from "./<machineName>.js";
import {SelectError} from "./btypes/BUtils.js";
<importedEnums; separator="\n">
<machineEnums : {enum | import {<enum>\} from "./<machineName>.js"<\n>}>
<machineEnums : {enum | import {enum_<enum>\} from "./<machineName>.js"<\n>}>
<imports; separator="\n">

document.addEventListener('DOMContentLoaded', (event) => {
  checkLoaded();
});

function checkLoaded() {
    const iframe = document.getElementById("<svgName>");
    if (iframe == null) {
        window.setTimeout(checkLoaded, 100);
    } else {
        var iframeDoc = iframe.contentDocument;
        if (iframeDoc != null && iframeDoc.readyState == 'complete') {
            initialize();
        } else {
            window.setTimeout(checkLoaded, 100);
        }
    }
}

function initialize() {
    var <initialMachineVar()> = new <machineName>();
    var _state_list = [];
    var _transition_list = [];
    var _included_machines = {};
    _included_machines["<machineName>"] = function(){return <initialMachineVar()>};
    <includedMachines; separator="\n">
    var _state_view_vars = document.getElementById("_state_view_variables");
    var _state_view_consts = document.getElementById("_state_view_constants");
    var _state_view_sets = document.getElementById("_state_view_sets");
    var _state_view_invariant = document.getElementById("_state_view_invariant");
    <if(svgName)>var _svg_vars = {}
    <svgElements: {svgElement | _svg_vars["<svgElement>"] = document.getElementById("<svgName>").contentDocument.getElementById("<svgElement>")<\n>}><endif>
    var _machine_vars = {}
    var _var_label;
    var _var_div;
    <variables; separator="\n">
    <constants; separator="\n">
    <sets; separator="\n">
    <invariant; separator="\n">

    function updateVisuals () {
      <if(svgName)><visualUpdates; separator="\n"><endif>
      <variableUpdates; separator="\n">
      for (let i = 1; i \<= <invariantCount>; i++) {
        _machine_vars["_check_inv_"+i].innerHTML = _machine["_check_inv_"+i]();
      }
      checkTransitions();
    }

    var _history_view_buttons = document.getElementById("_history_view_buttons");
    var _buttonLeft = document.createElement("button");
    var _buttonRight = document.createElement("button");
    var _buttonUpload = document.createElement("button");
    var _buttonExport = document.createElement("button");
    var _inputUpload = document.createElement("input");
    var _buttonRun10 = document.createElement("button");
    var _buttonRun500 = document.createElement("button");

    var _simulation_view_buttons = document.getElementById("_simulation_view_buttons");
    var _buttonLoadSimulation = document.createElement("button");


    function flattenTuple(tuple) {
        if(!(tuple instanceof BTuple)) {
            return [tuple];
        }
        return [...flattenTuple(tuple.projection1()), tuple.projection2()];
    }

    function createOptionList(event, transition) {
        let collator = new Intl.Collator([], {numeric: true});
        for(let index in _machine_events[event].parameterNames) {
            let parameter = _machine_events[event].parameterNames[index];
            var datalist = document.querySelector("#" + event + "_" + parameter + "_datalist");
            datalist.replaceChildren();
            for(let value of Array.of(...transition).sort((a, b) => collator.compare(a, b))) {
                let option = document.createElement("option");
                value = flattenTuple(value);
                option.text = value[index].toString();
                datalist.appendChild(option);
            }
        }
    }

    function checkTransitions () {
        let index = [..._history_view.children].indexOf(_history_view.querySelector(".active"));
        for(event in _machine_events) {
          var transition;
          if(_transition_list[index]?.[event] == null ?? true) {
             transition = <initialMachineVar()>["_tr_" + event]();
             _transition_list[index][event] = transition;
          } else {
             transition = _transition_list[index][event];
          }
          if(!(transition instanceof BSet)) {
            _machine_events[event].disabled = !transition;
          } else if (transition.size().intValue() == 0) {
            _machine_events[event].disabled = true;
          } else {
            let collator = new Intl.Collator([], {numeric: true});
            for(let current_transition of transition) {
                try {
                    var current_machine = <initialMachineVar()>._copy();
                    current_machine[event](...flattenTuple(current_transition));
                } catch (error) {
                      if(! error instanceof SelectError) {
                          throw error;
                      }
                      transition = transition.difference(new BSet(current_transition));
                }
            }
            if(transition.size().intValue() == 0) {
                _machine_events[event].disabled = true;
            } else {
                _machine_events[event].disabled = false;
            }
            createOptionList(event, transition);
          }
        }
        _buttonLeft.disabled = document.querySelector(".active").index \<= 0;
        _buttonRight.disabled = document.querySelector(".active").index >= document.querySelector("span:last-of-type").index;
    }

    _operations_view = document.getElementById("_operations_view");
    _history_view = document.getElementById("_history_view");
    _scenario_view = document.getElementById("_scenario_view");
    _simulation_view = document.getElementById("_simulation_view");

    var _history_onclick_function = function () {
      <initialMachineVar()> = _state_list[this.index]._copy();
      document.querySelectorAll("span").forEach(el => el.classList.remove("active"));
      this.classList.add("active");
      updateVisuals();
    }

    function createHistoryElement(text, index) {
      var history_element = document.createElement("span");
      history_element.innerHTML = text + "\</br>";
      history_element.index = index;
      document.querySelectorAll("span.active").forEach(element => element.classList.remove("active"));
      history_element.classList.add("active");
      history_element.onclick = _history_onclick_function;
      _state_list = _state_list.slice(0, index);
      _state_list.push(<initialMachineVar()>._copy());
      _transition_list = _transition_list.slice(0, index);
      _transition_list.push({});
      while(_history_view.querySelectorAll("span").length > index && _history_view.lastChild !== null) {
        _history_view.removeChild(_history_view.lastChild);
      }
      _history_view.appendChild(history_element);
    }

    function selectHistoryElement(offset) {
      let currentHistoryElement = _history_view.querySelector(".active");
      let index = currentHistoryElement.index + offset;
      if (index \< 0 || index >= _state_list.length) {
        return;
      }
      currentHistoryElement.classList.remove("active");
      <initialMachineVar()> = _state_list[index]._copy();
      _history_view.querySelectorAll(".active").forEach(el => el.classList.remove("active"));
      currentHistoryElement = _history_view.querySelector("span:nth-of-type(" + (index + 1) + ")");
      currentHistoryElement.classList.add("active");
      updateVisuals();
    }

    function createScenarioElement(text, trace) {
      var scenario_element = document.createElement("button");
      var remove_element = document.createElement("button");
      scenario_element.innerHTML = text + "\</br>";
      remove_element.innerHTML = "X";
      var div_element = document.createElement("div");
      div_element.appendChild(scenario_element);
      div_element.appendChild(remove_element);
      _scenario_view.appendChild(div_element);
      scenario_element.onclick = function() {
        displayTrace(trace);
      };
      remove_element.onclick = function() {
        _scenario_view.removeChild(div_element);
      };
    }

    function createSimulationElement(text) {
      var simulation_element = document.createElement("button");
      var remove_element = document.createElement("button");
      simulation_element.innerHTML = text + "\</br>";
      remove_element.innerHTML = "X";
      var div_element = document.createElement("div");
      div_element.appendChild(simulation_element);
      div_element.appendChild(remove_element);
      _simulation_view.appendChild(div_element);
      simulation_element.onclick = function() {
        try {
            playSimulation(simulation);
        } catch (error) {
            alert("Simulation could not be played.");
            console.error(error);
        }
      };
      remove_element.onclick = function() {
        _simulation_view.removeChild(div_element);
      };
    }

    _buttonLeft.innerHTML="&#9664;";
    _buttonLeft.onclick = function(){selectHistoryElement(-1)};
    _buttonRight.innerHTML="&#9654;";
    _buttonRight.onclick = function(){selectHistoryElement(1)};
    _history_view_buttons.appendChild(_buttonLeft);
    _history_view_buttons.appendChild(_buttonRight);


    _buttonUpload.textContent = "Import trace";
    _buttonUpload.onclick = importTrace;
    _history_view_buttons.appendChild(_buttonUpload);

    _buttonExport.textContent = "Export trace";
    _buttonExport.onclick = exportTrace;
    _history_view_buttons.appendChild(_buttonExport);

    _buttonRun10.textContent = "Run trace(10ms)";
    _buttonRun10.onclick = function(){runTrace(10);};
    _history_view_buttons.appendChild(_buttonRun10);

    _buttonRun500.textContent = "Run trace(500ms)";
    _buttonRun500.onclick = function(){runTrace(500);};
    _history_view_buttons.appendChild(_buttonRun500);

    createHistoryElement("Initialisation", 0);
    var _current_trace = [{name: "$initialise_machine", params: {}}];


    createHistoryElement("Initialisation", 0);


    _buttonLoadSimulation.textContent = "Load Simulation";
    _buttonLoadSimulation.onclick = loadSimulation;
    _simulation_view_buttons.appendChild(_buttonLoadSimulation);

    var _current_simulation = null;

    var _param_div;
    var _param_datalist;
    var _onclick_function;
    var _machine_events = {};
    <if(svgName)>var _svg_events = {};<endif>
    <events: {event| <event><\n>}>
    updateVisuals();
    if(_operations_view.querySelectorAll("label").length == 0) {
        document.documentElement.style.setProperty('--noneOrGrid', 'none');
    }

    function displayTrace(trace) {
        selectHistoryElement(-_history_view.querySelector(".active").index);
        let transitions = trace.transitionList
        for(let transition of transitions) {
          if(transition.name.startsWith("$")) {
            continue;
          }
          if(transition.params == null) {
            transition.params = {};
          }
          let parameters = Object.keys(transition.params).map(param => _machine_events[transition.name][param].parseValue(transition.params[param]))
          let returnValue = _machine[transition.name](...parameters);
          createHistoryElement(transition.name + "(" + parameters.join(", ") + ")" + (returnValue? " (" + returnValue.toString() + ")": ""), _history_view.querySelector(".active").index + 1);
          let parametersJSON = transition.params;
          _current_trace.push({name: transition.name, params: parametersJSON});
        }
        updateVisuals();
        selectHistoryElement(_history_view.querySelector("span:last-of-type").index-_history_view.querySelector(".active").index);
    }

    function importTrace() {
        var _file_input = document.querySelector("#_upload_trace_input");
        _file_input.accept = ".prob2trace";
        _file_input.onchange = async _ => {
            let files = Array.from(_file_input.files);
            let file = files[0];
            let response = await fetch(file.name);
            let data = await response.text();
            let trace = JSON.parse(data);
            createScenarioElement(file.name, trace);

            try {
                displayTrace(trace);
            } catch (error) {
                alert("Trace could not be completely imported.");
                console.error(error);
            }
        };

        _file_input.click();
    }

    function exportTrace() {
      var transitions = _current_trace;
      var object = {
        description: "Created from B2Program JS Export",
        transitionList: transitions,
        metadata: {
          fileType: "Trace",
          formatVersion: 1,
          creator: "B2Program JS",
          modelName: "<machineName>"
        }
      };
      const blob = new Blob([JSON.stringify(object, null, '\t')]);
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'Scenario.prob2trace';
      a.click();
    }

    function loadSimulation() {
        var _file_input = document.querySelector("#_load_simulation");
        _file_input.accept = ".json";
        _file_input.onchange = async _ => {
            let files = Array.from(_file_input.files);
            let file = files[0];
            let response = await fetch(file.name);
            let data = await response.text();
            let simulation = JSON.parse(data);
            _current_simulation = simulation;
            createSimulationElement(file.name);
        };

        _file_input.click();
    }


    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function runTrace(ms) {
        let firstElement = _history_view.querySelector("span");
        firstElement.click();
        let currentHistoryElement = _history_view.querySelector(".active");
        let index = currentHistoryElement.index + 1;
        while (index >= 0 && index \< _state_list.length) {
          selectHistoryElement(1);
          await sleep(ms);
          currentHistoryElement = _history_view.querySelector(".active");
          index = currentHistoryElement.index + 1;
        }
    }

    async function playSimulation(simulation) {
        // initialize
        var simTime = 0;
        var delay = 0;
        var schedulingTable = {};
        var newDelay = 0;


        while(true) { // Finish at ending condition
            simTime = simTime + delay; // Update time
            // Update scheduling table
            newDelay = Number.MAX_VALUE;
            Object.keys(schedulingTable).forEach((key, index) => {
                schedulingTable(key).forEach(activation => {
                    activation.decreaseTime(delay);
                    // Update new delay
                    if(activation.time \< newDelay) {
                        newDelay = activation.time;
                    }
                });
            });
            delay = newDelay;
            executeActivatedEvents(); // Execute activated events
            await sleep(delay);
            console.log(simTime);
        }
    }

    function executeActivatedEvents() {

    }
}
>>

btype_import(type) ::= <<
import {<type>} from "./btypes/<type>.js";
>>

visualUpdate(machineVar, attribute, expression) ::= <<
_svg_vars["<machineVar>"].setAttribute("<attribute>", <expression>);
>>

variableUpdate(variable, machineName) ::= <<
_machine_vars["<variable>"].innerHTML = _included_machines["<machineName>"]()._get_<variable>();
>>

event(machineEvent, svgName, parameterCreation, parameterNames, svgEvents) ::= <<
_param_div = document.createElement("div");
_param_div.classList.add("param");
_machine_events["<machineEvent>"] = document.createElement("button");
<parameterCreation: {param| <param><\n>}>
_operations_view.appendChild(_param_div);


_machine_events["<machineEvent>"].style.gridColumn="-1";
_machine_events["<machineEvent>"].innerHTML = "<machineEvent>";
_machine_events["<machineEvent>"].parameterNames = [<parameterNames: {param | "<param>", }>];
_machine_events["<machineEvent>"].onclick = <onclick_function(false, machineEvent, parameterNames)>
_operations_view.appendChild(_machine_events["<machineEvent>"]);

<svgEvents; separator="\n">
>>

svg_event(machineEvent, machineEventId, svgName, parameterMap, parameterNames) ::= <<
_svg_events["<machineEventId>"] = document.getElementById("<svgName>").contentDocument.getElementById("<machineEventId>");
_svg_events["<machineEventId>"].onclick = <onclick_function(parameterMap, machineEvent, parameterNames)>
>>

onclick_function(parameterMap, machineEvent, parameterNames) ::= <<
function() {
  var parameters = <if(parameterMap)><parameterMap><else>{}<endif>;
  let index = [..._history_view.children].indexOf(_history_view.querySelector(".active"));
  var transition;
  if(_transition_list[index]?.["<machineEvent>"] == null ?? true) {
      transition = <initialMachineVar()>["_tr_<machineEvent>"]();
      _transition_list[index]["<machineEvent>"] = transition;
  } else {
      transition = _transition_list[index]["<machineEvent>"];
  }
  if(!(transition instanceof BSet)) {
    if(!transition) {
        alert("Event <machineEvent> is not enabled!");
        return;
    }
  } else {
    try  {
        var parameterTuple = [<parameterNames: {param| parameters?.<param> ?? _machine_events["<machineEvent>"]["<param>"].getValue(), }>].reduce((a, e) => new BTuple(a, e));
    } catch {
        alert("Invalid parameters for event <machineEvent>!\nPossible values are:\n" + transition.toString());
        return;
    }
    if(! transition.elementOf(parameterTuple).booleanValue()) {
        alert("Invalid parameters for event <machineEvent>!\nPossible values are:\n" + transition.toString());
        return;
    }
  }
  try {
    var parameters = [<parameterNames: {param| parameters?.<param> ?? _machine_events["<machineEvent>"]["<param>"].getValue(), }>];
    var returnValue = <initialMachineVar()>.<machineEvent>(...parameters);
    createHistoryElement("<machineEvent>(" + parameters.join(", ") + ")" + (returnValue? " -> (" + returnValue.toString() + ")": ""), _history_view.querySelector(".active").index + 1);
    let parametersJSON = {};
    <parameterNames: {param | parametersJSON["<param>"] = _machine_events["<machineEvent>"]["<param>"].getValue().toString();};separator="\n">
    _current_trace = _current_trace.slice(0, index + 1)
    _current_trace.push({name: "<machineEvent>", params: parametersJSON});
    updateVisuals();
  } catch (error) {
    if(! error instanceof SelectError) {
        throw error;
    }
    if(transition instanceof BSet) {
        var parameterTuple = [<parameterNames: {param| parameters?.<param> ?? _machine_events["<machineEvent>"]["<param>"].getValue(), }>].reduce((a, e) => new BTuple(a, e));
        transition = transition.difference(new BSet(parameterTuple));
        _transition_list[index]["<machineEvent>"] = transition;
        if(transition.size().intValue() == 0) {
            _machine_events["<machineEvent>"].disabled = true;
        }
        createOptionList("<machineEvent>", transition);
    }
    alert(error.message);
  }
}

>>

parameter(name, getValueMethod, eventName) ::= <<
var <name>_label = document.createElement("label")
<name>_label.textContent = "<name>:";
<name>_label.htmlFor="<name>";
_param_div.appendChild(<name>_label);
var <name> = document.createElement("input");
<name>.id="<name>";
_param_datalist = document.createElement("datalist");
_param_datalist.id="<eventName>_<name>_datalist";
_param_div.appendChild(_param_datalist);
<name>.setAttribute("list", "<eventName>_<name>_datalist");
<getValueMethod>
_param_div.appendChild(<name>);
_machine_events["<eventName>"]["<name>"] = <name>;
>>

boolValue(name) ::= <<
<name>.getValue = function() {return new BBoolean(this.value == "true")}
<name>.parseValue = function(value) {return new BBoolean(value == "true")}
>>

intValue(name) ::= <<
<name>.getValue = function() {return new BInteger(parseInt(this.value))}
<name>.parseValue = function(value) {return new BInteger(parseInt(value))}
>>

enumValue(name, enum) ::= <<
<name>.getValue = function() {return <enum>["get_" + this.value]()}
<name>.parseValue = function(value) {return <enum>["get_" + value]()}
>>

variable(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]()._get_<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_vars.appendChild(_var_label);
_state_view_vars.appendChild(_var_div);
>>

constant(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]()._get_<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_consts.appendChild(_var_label);
_state_view_consts.appendChild(_var_div);
>>

set(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]()._get__<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_sets.appendChild(_var_label);
_state_view_sets.appendChild(_var_div);
>>

invariant(invariantFormula, machineName, invariantFunction) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]().<invariantFunction>();
_var_div.id = "<invariantFunction>";
_machine_vars["<invariantFunction>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "<invariantFunction>";
_var_label.innerHTML = "<invariantFormula>";
_state_view_invariant.appendChild(_var_label);
_state_view_invariant.appendChild(_var_div);
>>

initialMachineVar() ::= <<
_machine
>>

getMachineFromMachine(machine, includedMachine) ::= <<
<machine>._<includedMachine>
>>

mapIncludedMachineName(machineName, pathFromMainMachine) ::= <<
_included_machines["<machineName>"] = function(){return <pathFromMainMachine>};
>>

parameterMap(parameters) ::= <<
{
    <parameters; separator="\n">
}
>>

parameterMapPredicate(name, predicate) ::= <<
<name>: <predicate>,
>>
keywords() ::= <<
document, false, for, function, import, true, var
>>


visulisation(imports, machineName, svgName, svgElements, events, visualUpdates, importedEnums, machineEnums, variables, constants, sets, invariant, variableUpdates, includedMachines) ::= <<
import <machineName> from "./<machineName>.js"
<importedEnums; separator="\n">
<machineEnums : {enum | import {<enum>\} from "./<machineName>.js"<\n>}>
<machineEnums : {enum | import {enum_<enum>\} from "./<machineName>.js"<\n>}>
<imports; separator="\n">

var <initialMachineVar()> = new <machineName>();
var _state_list = [];
var _included_machines = {};
_included_machines["<machineName>"] = function(){return <initialMachineVar()>};
<includedMachines; separator="\n">
var _state_view_vars = document.getElementById("_state_view_variables");
var _state_view_consts = document.getElementById("_state_view_constants");
var _state_view_sets = document.getElementById("_state_view_sets");
var _state_view_invariant = document.getElementById("_state_view_invariant");
<if(svgName)>var _svg_vars = {}
<svgElements: {svgElement | _svg_vars["<svgElement>"] = document.getElementById("<svgName>").contentDocument.getElementById("<svgElement>")<\n>}><endif>
var _machine_vars = {}
var _var_label;
var _var_div;
<variables; separator="\n">
<constants; separator="\n">
<sets; separator="\n">
<invariant>

function updateVisuals () {
  <if(svgName)><visualUpdates; separator="\n"><endif>
  <variableUpdates; separator="\n">
  _machine_vars["_invariant"].innerHTML = _machine._check_inv();
  checkTransitions();
}

var _history_view_buttons = document.getElementById("_history_view_buttons");
var _buttonLeft = document.createElement("button");
var _buttonRight = document.createElement("button");

function checkTransitions () {
    for(event in _machine_events) {
      var transition = <initialMachineVar()>["_tr_" + event]();
      if(!(transition instanceof BSet)) {
        _machine_events[event].disabled = !transition;
      } else if (transition.size().intValue() == 0) {
        _machine_events[event].disabled = true;
      }
    }
    _buttonLeft.disabled = document.querySelector(".active").index \<= 0;
    _buttonRight.disabled = document.querySelector(".active").index >= document.querySelector("span:last-of-type").index;
}

_operations_view = document.getElementById("_operations_view");
_history_view = document.getElementById("_history_view");

var _history_onclick_function = function () {
  <initialMachineVar()> = _state_list[this.index]._copy();
  document.querySelectorAll("span").forEach(el => el.classList.remove("active"));
  this.classList.add("active");
  updateVisuals();
}

function createHistoryElement(text, index) {
  var history_element = document.createElement("span");
  history_element.innerHTML = text + "\</br>";
  history_element.index = index;
  document.querySelectorAll("span").forEach(element => element.classList.remove("active"));
  history_element.classList.add("active");
  history_element.onclick = _history_onclick_function;
  _state_list = _state_list.slice(0, index);
  _state_list.push(<initialMachineVar()>._copy());
  while(_history_view.querySelectorAll("span").length > index && _history_view.lastChild !== null) {
    _history_view.removeChild(_history_view.lastChild);
  }
  _history_view.appendChild(history_element);
}

function selectHistoryElement(offset) {
  let currentHistoryElement = _history_view.querySelector(".active");
  let index = currentHistoryElement.index + offset;
  if (index \< 0 || index >= _state_list.length) {
    return;
  }
  currentHistoryElement.classList.remove("active");
  <initialMachineVar()> = _state_list[index]._copy();
  _history_view.querySelectorAll("span").forEach(el => el.classList.remove("active"));
  _history_view.querySelector("span:nth-of-type(" + (index + 1) + ")").classList.add("active");
  updateVisuals();
}

_buttonLeft.innerHTML="&#9664;";
_buttonLeft.onclick = function(){selectHistoryElement(-1)};
_buttonRight.innerHTML="&#9654;";
_buttonRight.onclick = function(){selectHistoryElement(1)};
_history_view_buttons.appendChild(_buttonLeft);
_history_view_buttons.appendChild(_buttonRight);

createHistoryElement("Initialisation", 0);

var _param_div;
var _onclick_function;
var _machine_events = {};
<if(svgName)>var _svg_events = {};<endif>
<events: {event| <event><\n>}>

updateVisuals();
if(_operations_view.querySelectorAll("label").length == 0) {
    document.documentElement.style.setProperty('--noneOrGrid', 'none');
}
>>

btype_import(type) ::= <<
import {<type>} from "./btypes/<type>.js";
>>

visualUpdate(machineVar, attribute, expression) ::= <<
_svg_vars["<machineVar>"].setAttribute("<attribute>", <expression>);
>>

variableUpdate(variable, machineName) ::= <<
_machine_vars["<variable>"].innerHTML = _included_machines["<machineName>"]()._get_<variable>();
>>

event(machineEvent, svgName, parameterCreation, parameterNames, svgEvents) ::= <<
_param_div = document.createElement("div");
_param_div.classList.add("param");
_machine_events["<machineEvent>"] = document.createElement("button");
<parameterCreation: {param| <param><\n>}>
_operations_view.appendChild(_param_div);


_machine_events["<machineEvent>"].style.gridColumn="-1";
_machine_events["<machineEvent>"].innerHTML = "<machineEvent>";
_machine_events["<machineEvent>"].onclick = <onclick_function(false, machineEvent, parameterNames)>
_operations_view.appendChild(_machine_events["<machineEvent>"]);

<svgEvents; separator="\n">
>>

svg_event(machineEvent, machineEventId, svgName, parameterMap, parameterNames) ::= <<
_svg_events["<machineEventId>"] = document.getElementById("<svgName>").contentDocument.getElementById("<machineEventId>");
_svg_events["<machineEventId>"].onclick = <onclick_function(parameterMap, machineEvent, parameterNames)>
>>

onclick_function(parameterMap, machineEvent, parameterNames) ::= <<
function() {
  var parameters = <if(parameterMap)><parameterMap><else>{}<endif>;
  var transition = <initialMachineVar()>._tr_<machineEvent>();
  if(!(transition instanceof BSet)) {
    if(!transition) {
        alert("Event <machineEvent> is not enabled!");
        return;
    }
  } else {
    var parameterTuple = [<parameterNames: {param| parameters?.<param> ?? _machine_events["<machineEvent>"]["<param>"].getValue(), }>].reduce((a, e) => new BTuple(a, e))
    if(! transition.elementOf(parameterTuple).booleanValue()) {
        alert("Invalid parameters for event <machineEvent>!");
        return;
    }
  }
  var returnValue = <initialMachineVar()>.<machineEvent>(<parameterNames: {param| parameters?.<param> ?? _machine_events["<machineEvent>"]["<param>"].getValue(), }>);
  createHistoryElement("<machineEvent>" + (returnValue? " (" + returnValue.toString() + ")": ""), _history_view.querySelector(".active").index + 1);
  updateVisuals();
}

>>

parameter(name, getValueMethod, eventName) ::= <<
var <name>_label = document.createElement("label")
<name>_label.textContent = "<name>:";
<name>_label.htmlFor="<name>";
_param_div.appendChild(<name>_label);
var <name> = document.createElement("input");
<name>.id="<name>";
<getValueMethod>
_param_div.appendChild(<name>);
_machine_events["<eventName>"]["<name>"] = <name>;
>>

boolValue(name) ::= <<
<name>.getValue = function() {return new BBoolean(this.value == "true")}
>>

intValue(name) ::= <<
<name>.getValue = function() {return new BInteger(parseInt(this.value))}
>>

enumValue(name, enum) ::= <<
<name>.getValue = function() {return <enum>["get_" + this.value]()}
>>

variable(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]()._get_<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_vars.appendChild(_var_label);
_state_view_vars.appendChild(_var_div);
>>

constant(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]()._get_<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_consts.appendChild(_var_label);
_state_view_consts.appendChild(_var_div);
>>

set(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]()._get__<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_sets.appendChild(_var_label);
_state_view_sets.appendChild(_var_div);
>>

invariant(invariantFormula, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]()._check_inv();
_var_div.id = "_invariant";
_machine_vars["_invariant"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_invariant";
_var_label.innerHTML = "<invariantFormula>";
_state_view_invariant.appendChild(_var_label);
_state_view_invariant.appendChild(_var_div);
>>

initialMachineVar() ::= <<
_machine
>>

getMachineFromMachine(machine, includedMachine) ::= <<
<machine>._<includedMachine>
>>

mapIncludedMachineName(machineName, pathFromMainMachine) ::= <<
_included_machines["<machineName>"] = function(){return <pathFromMainMachine>};
>>

parameterMap(parameters) ::= <<
{
    <parameters; separator="\n">
}
>>

parameterMapPredicate(name, predicate) ::= <<
<name>: <predicate>,
>>
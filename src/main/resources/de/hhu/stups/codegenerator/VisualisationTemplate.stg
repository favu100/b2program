keywords() ::= <<
document, false, for, function, import, true, var
>>


visulisation(imports, machineName, svgName, machineVars, machineEvents, visualUpdates, importedEnums, machineEnums, variables, constants, sets, invariant, variableUpdates, includedMachines) ::= <<
import <machineName> from "./<machineName>.js"
<importedEnums; separator="\n">
<machineEnums : {enum | import {<enum>\} from "./<machineName>.js"<\n>}>
<machineEnums : {enum | import {enum_<enum>\} from "./<machineName>.js"<\n>}>
<imports; separator="\n">

var <initialMachineVar()> = new <machineName>();
var _included_machines = {};
_included_machines["<machineName>"] = <initialMachineVar()>;
<includedMachines; separator="\n">
var _state_view_vars = document.getElementById("_state_view_variables");
var _state_view_consts = document.getElementById("_state_view_constants");
var _state_view_sets = document.getElementById("_state_view_sets");
var _state_view_invariant = document.getElementById("_state_view_invariant");
var _svg_vars = {}
<machineVars: {machineVar | _svg_vars["<machineVar>"] = document.getElementById("<svgName>").contentDocument.getElementById("<machineVar>")<\n>}>
var _machine_vars = {}
var _var_label;
var _var_div;
<variables; separator="\n">
<constants; separator="\n">
<sets; separator="\n">
<invariant>


function updateVisuals (){
  <visualUpdates; separator="\n">
  <variableUpdates; separator="\n">
  _machine_vars["_invariant"].innerHTML = _machine._check_inv()
}

_operations_view = document.getElementById("_operations_view");
_history_view = document.getElementById("_history_view");
var _param_div;
var _onclick_function;
var _svg_events = {}
<machineEvents: {machineEvent| <machineEvent><\n>}>

updateVisuals();
>>

btype_import(type) ::= <<
import {<type>} from "./btypes/<type>.js";
>>

visualUpdate(machineVar, attribute, expression) ::= <<
_svg_vars["<machineVar>"].setAttribute("<attribute>", <expression>);
>>

variableUpdate(variable, machineName) ::= <<
_machine_vars["<variable>"].innerHTML = _included_machines["<machineName>"]._get_<variable>();
>>

event(machineEvent, svgName, parameterCreation, parameterNames) ::= <<
_param_div = document.createElement("div");
_param_div.classList.add("param");
var <machineEvent> = document.createElement("button");
<parameterCreation: {param| <param><\n>}>
_operations_view.appendChild(_param_div);


<machineEvent>.style.gridColumn="-1";
<machineEvent>.innerHTML = "<machineEvent>";
_onclick_function = function() {
  <initialMachineVar()>.<machineEvent>(<parameterNames: {param| <machineEvent>["<param>"].getValue(), }>);
  updateVisuals();
  var history_element = document.createElement("span");
  history_element.innerHTML = "<machineEvent>\</br>";
  _history_view.appendChild(history_element);
}
<machineEvent>.onclick = _onclick_function;
_operations_view.appendChild(<machineEvent>);
>>

onclick_event(machineEventId, svgName) ::= <<
_svg_events["<machineEventId>"] = document.getElementById("<svgName>").contentDocument.getElementById("<machineEventId>");
_svg_events["<machineEventId>"].onclick = _onclick_function;
>>

parameter(name, getValueMethod, eventName) ::= <<
var <name>_label = document.createElement("label")
<name>_label.textContent = "<name>:";
<name>_label.htmlFor="<name>";
_param_div.appendChild(<name>_label);
var <name> = document.createElement("input");
<name>.id="<name>";
<getValueMethod>
_param_div.appendChild(<name>);
<eventName>["<name>"] = <name>;
>>

boolValue(name) ::= <<
<name>.getValue = function() {return new BBoolean(this.value == "true")}
>>

intValue(name) ::= <<
<name>.getValue = function() {return new BInteger(parseInt(this.value))}
>>

enumValue(name, enum) ::= <<
<name>.getValue = function() {return <enum>["get_" + this.value]()}
>>

variable(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]._get_<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_vars.appendChild(_var_label);
_state_view_vars.appendChild(_var_div);
>>

constant(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]._get_<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_consts.appendChild(_var_label);
_state_view_consts.appendChild(_var_div);
>>

set(var, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]._get__<var>();
_var_div.id = "_var_<var>";
_machine_vars["<var>"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_var_<var>";
_var_label.innerHTML = "<machineName>.<var>";
_state_view_sets.appendChild(_var_label);
_state_view_sets.appendChild(_var_div);
>>

invariant(invariantFormula, machineName) ::= <<
_var_div = document.createElement("div");
_var_div.innerHTML = _included_machines["<machineName>"]._check_inv();
_var_div.id = "_invariant";
_machine_vars["_invariant"] = _var_div;
_var_label = document.createElement("label");
_var_label.htmlFor = "_invariant";
_var_label.innerHTML = "<invariantFormula>";
_state_view_invariant.appendChild(_var_label);
_state_view_invariant.appendChild(_var_div);
>>

initialMachineVar() ::= <<
_machine
>>

getMachineFromMachine(machine, includedMachine) ::= <<
<machine>._<includedMachine>
>>

mapIncludedMachineName(machineName, pathFromMainMachine) ::= <<
_included_machines["<machineName>"] = <pathFromMainMachine>;
>>